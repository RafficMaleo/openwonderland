 /**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath" 
 * exception as provided by Sun in the License file that accompanied 
 * this code.
 */
package org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer;

import imi.character.CharacterEyes;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.HashMap;
import java.util.Map;
import javax.swing.JButton;

/**
 * A test to demonstrate triggering motion from other interfaces
 *
 * @author paulby
 */
public class GestureHUDPanel extends javax.swing.JPanel {

    private Map<String, String> gestureMap = new HashMap();

    /** Creates new form AvatarTestPanel */
    public GestureHUDPanel() {
        initComponents();
        setAvatarCharactar(null);
    }

    public void setAvatarCharactar(final WlAvatarCharacter avatar) {

        // Clear out the map of avatar gesture actions and the names we
        // want to display. Remove all of the entries in the panel
        gestureMap.clear();
        removeAll();

        // If we don't have an avatar, then just return
        if (avatar == null) {
            return;
        }

        // Otherwise, figure out which gestures are supported. We want to
        // remove the "Male_" or "Female_" for now.
        for (String action : avatar.getAnimationNames()) {
            String name = action;
            if (action.startsWith("Male_") == true) {
                name = name.substring(5);
            }
            else if (action.startsWith("Female_") == true) {
                name = name.substring(7);
            }
            gestureMap.put(name, action);
        }

        // Put in the left and right wink
        gestureMap.put("Left Wink", "LeftWink");
        gestureMap.put("Right Wink", "RightWink");

        // All JButtons for each of the actions
        for (String name : gestureMap.keySet()) {
            JButton b = new JButton(name);
            b.setActionCommand(gestureMap.get(name));
            b.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    // Figure out what the action is. If it is a special "wink"
                    // then fork off to special handling
                    String action = e.getActionCommand();
                    if (action.equals("LeftWink") == true) {
                        CharacterEyes eyes = avatar.getEyes();
                        eyes.wink(false);
                    }
                    else if (action.equals("RightWink") == true) {
                        CharacterEyes eyes = avatar.getEyes();
                        eyes.wink(true);
                    }
                    else {
                        avatar.playAnimation(action);
                    }
                }
            });
            add(b);
        }

        // Tell the panel to layout itself
        invalidate();
        repaint();
        
        setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
