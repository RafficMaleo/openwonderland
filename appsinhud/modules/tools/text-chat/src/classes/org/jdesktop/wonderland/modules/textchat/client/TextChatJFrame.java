/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.textchat.client;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Logger;

/**
 * A JFrame to display a text chat window.
 * 
 * @author Jordan Slott <jslott@dev.java.net>
 */
public class TextChatJFrame extends javax.swing.JFrame {

    private Logger logger = Logger.getLogger(TextChatJFrame.class.getName());
    private TextChatConnection textChatConnection = null;
    private String localUser = null;
    private String remoteUser = null;

    /** Creates new form GlobalTextChatJFrame */
    public TextChatJFrame() {
        initComponents();

        // Listen for a Return on the text entry field, and click the Send
        // button
        messageTextField.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                sendButton.doClick();
            }
        });

        // Listen for the click of the Send button, and send the message to
        // the server. We immediately display the message locally since it is
        // not mirrored from the server for the sending client.
        sendButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                String text = messageTextField.getText();
                textChatConnection.sendTextMessage(text, localUser, remoteUser);
                messageTextField.setText("");
                appendTextMessage(text, localUser);
            }
        });
        
        // Pick a good initial size for the frame
        setSize(300, 450);
    }

    /**
     * Adds a text message, given the user name and message to the chat window.
     */
    public void appendTextMessage(String message, String userName) {
        String msg = userName + ": " + message + "\n";
        messageTextArea.append(msg);
        messageTextArea.setCaretPosition(messageTextArea.getText().length());
    }

    /**
     * Makes the text frame active, giving the text chat connection, the name
     * of the local user and the name of the remote user (empty string if for
     * all users).
     *
     * @param connection The text chat communications connection
     * @param localUser The user name of this user
     * @param remoteUser The user name of the other user
     */
    public void setActive(TextChatConnection connection, String localUser,
            String remoteUser) {

        this.textChatConnection = connection;
        this.localUser = localUser;
        this.remoteUser = remoteUser;
        messageTextField.setEnabled(true);
        sendButton.setEnabled(true);

        // Set the title based upon the remote user. If the remote user is "",
        // then insert "Everyone"
        String title = "Text Chat All";
        if (remoteUser != null && remoteUser.equals("") == false) {
            title = "Text Chat (" + remoteUser + ")";
        }
        setTitle(title);
    }

    /**
     * Deactivates the chat by displaying a message and turning off the GUI.
     */
    public void deactivate() {
        String date = new SimpleDateFormat("h:mm a").format(new Date());
        String msg = "--- User " + remoteUser + " has left the world at " +
                date + " ---\n";
        messageTextArea.append(msg);
        messageTextField.setEnabled(false);
        sendButton.setEnabled(false);
    }

    /**
     * Re-activates the chat by displaying a message and turning on the GUI.
     */
    public void reactivate() {
        String date = new SimpleDateFormat("h:mm a").format(new Date());
        String msg = "--- User " + remoteUser + " has joined the world at " +
                date + " ---\n";
        messageTextArea.append(msg);
        messageTextField.setEnabled(true);
        sendButton.setEnabled(true);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        mainPanel = new javax.swing.JPanel();
        textEntryPanel = new javax.swing.JPanel();
        messageTextField = new javax.swing.JTextField();
        sendButton = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        messageTextArea = new javax.swing.JTextArea();

        getContentPane().setLayout(new java.awt.GridLayout(1, 0));

        mainPanel.setLayout(new java.awt.GridBagLayout());

        textEntryPanel.setLayout(new java.awt.GridBagLayout());

        messageTextField.setHorizontalAlignment(javax.swing.JTextField.LEFT);
        messageTextField.setEnabled(false);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 0, 0, 5);
        textEntryPanel.add(messageTextField, gridBagConstraints);

        sendButton.setText("Send");
        sendButton.setEnabled(false);
        textEntryPanel.add(sendButton, new java.awt.GridBagConstraints());

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.NORTHWEST;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(0, 5, 5, 5);
        mainPanel.add(textEntryPanel, gridBagConstraints);

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);

        messageTextArea.setColumns(20);
        messageTextArea.setEditable(false);
        messageTextArea.setLineWrap(true);
        messageTextArea.setRows(5);
        messageTextArea.setWrapStyleWord(true);
        jScrollPane1.setViewportView(messageTextArea);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridheight = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        gridBagConstraints.insets = new java.awt.Insets(5, 5, 5, 5);
        mainPanel.add(jScrollPane1, gridBagConstraints);

        getContentPane().add(mainPanel);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea messageTextArea;
    private javax.swing.JTextField messageTextField;
    private javax.swing.JButton sendButton;
    private javax.swing.JPanel textEntryPanel;
    // End of variables declaration//GEN-END:variables
}
