/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AvatarConfigFrame.java
 *
 * Created on Feb 9, 2009, 4:47:34 PM
 */

package org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer;

import imi.character.CharacterAttributes;
import imi.character.avatar.FemaleAvatarAttributes;
import imi.character.avatar.MaleAvatarAttributes;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.jdesktop.mtgame.WorldManager;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.jme.ClientContextJME;
import org.jdesktop.wonderland.client.login.ServerSessionManager;
import org.jdesktop.wonderland.modules.avatarbase.client.AvatarConfigManager;
import org.jdesktop.wonderland.modules.avatarbase.client.AvatarConfigManager.AvatarManagerListener;
import org.jdesktop.wonderland.modules.avatarbase.client.cell.AvatarConfigComponent;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentRepositoryException;

/**
 *
 * @author paulby
 */
public class AvatarConfigFrame extends javax.swing.JFrame {

    private AvatarImiJME avatarRenderer;
    private AvatarConfigManager avatarManager;

    private String currentAvatarSelection = null;

    private Cursor waitCursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);
    private Cursor normalCursor = Cursor.getDefaultCursor();

    /** Creates new form AvatarConfigFrame */
    public AvatarConfigFrame(AvatarImiJME avatarRenderer) {
        this.avatarRenderer = avatarRenderer;
        initComponents();

        WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
        avatarManager = AvatarConfigManager.getAvatarConigManager();

        DefaultListModel listModel = (DefaultListModel) avatarList.getModel();

        Iterable<String> avatars = avatarManager.getAvatars();
        for(String a : avatars) {
            listModel.addElement(a);
        }

        avatarManager.addAvatarManagerListener(new AvatarManagerListener() {
            public void avatarAdded(String name) {
                ((DefaultListModel) avatarList.getModel()).addElement(name);
            }

            public void avatarRemoved(String name) {
                ((DefaultListModel) avatarList.getModel()).removeElement(name);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGrou = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        maleRB = new javax.swing.JRadioButton();
        femaleRB = new javax.swing.JRadioButton();
        addB = new javax.swing.JButton();
        avatarNameTF = new javax.swing.JTextField();
        randomizeB = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        avatarListScrollPane = new javax.swing.JScrollPane();
        avatarList = new javax.swing.JList();
        applyDefaultB = new javax.swing.JButton();
        deleteB = new javax.swing.JButton();
        viewB = new javax.swing.JButton();

        setTitle("Avatar Configuration");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Create New Avatar"));

        jLabel1.setText("Avatar Name");

        genderGrou.add(maleRB);
        maleRB.setSelected(true);
        maleRB.setText("Male");

        genderGrou.add(femaleRB);
        femaleRB.setText("Female");

        addB.setText("Add to My Avatars");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        avatarNameTF.setText("my_avatar");

        randomizeB.setText("Randomize");
        randomizeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 292, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(11, 11, 11)
                            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(jLabel1)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(avatarNameTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                                .add(jPanel1Layout.createSequentialGroup()
                                    .add(maleRB)
                                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                                    .add(femaleRB))))
                        .add(jPanel1Layout.createSequentialGroup()
                            .add(randomizeB)
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                            .add(addB)))
                    .add(8, 8, 8)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 102, Short.MAX_VALUE)
            .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(jPanel1Layout.createSequentialGroup()
                    .add(4, 4, 4)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel1)
                        .add(avatarNameTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(maleRB)
                        .add(femaleRB))
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(randomizeB)
                        .add(addB))
                    .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("My Avatars"));

        avatarList.setModel(new DefaultListModel());
        avatarList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        avatarList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                avatarListValueChanged(evt);
            }
        });
        avatarListScrollPane.setViewportView(avatarList);

        applyDefaultB.setText("Apply as Default");
        applyDefaultB.setToolTipText("Make selection your default avatar");
        applyDefaultB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                applyDefaultBActionPerformed(evt);
            }
        });

        deleteB.setText("Delete");
        deleteB.setToolTipText("Delete selected avatar");
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        viewB.setText("View");
        viewB.setToolTipText("View selected avatar");
        viewB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel2Layout = new org.jdesktop.layout.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .add(avatarListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(18, 18, 18)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(applyDefaultB)
                    .add(deleteB)
                    .add(viewB))
                .addContainerGap(45, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel2Layout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(jPanel2Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, avatarListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jPanel2Layout.createSequentialGroup()
                        .add(viewB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteB)
                        .add(18, 18, 18)
                        .add(applyDefaultB))))
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void randomizeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeBActionPerformed
        final JFrame f = this;
        f.setCursor(waitCursor);

        EventQueue.invokeLater(new Runnable() {
            public void run() {

                WlAvatarCharacter avatarCharacter;
                CharacterAttributes attributes;
                String name = avatarNameTF.getText();

                if (femaleRB.isSelected())
                    attributes = new FemaleAvatarAttributes(name, true);
                else
                    attributes = new MaleAvatarAttributes(name, true);

                WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
                ServerSessionManager manager = session.getSessionManager();
                String serverHostAndPort = manager.getServerNameAndPort();
                attributes.setBaseURL("wla://avatarbaseart@"+serverHostAndPort+"/");

                LoadingInfo.startedLoading(avatarRenderer.getCell().getCellID(), name);
                try {
                    WorldManager wm = ClientContextJME.getWorldManager();
                    avatarCharacter = new WlAvatarCharacter(attributes, wm);

                    System.err.println("HEAD "+avatarCharacter.getAttributes().getHeadAttachment());

                } finally {
                    LoadingInfo.finishedLoading(avatarRenderer.getCell().getCellID(), name);
                }

                avatarRenderer.changeAvatar(avatarCharacter);
                f.setCursor(normalCursor);
           }
        });

    }//GEN-LAST:event_randomizeBActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        try {
            if (avatarManager.exists(avatarNameTF.getText())) {
                int option = JOptionPane.showConfirmDialog(this, "An avatar with name exists, overwrite ?", "Avatar Exists", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.CANCEL_OPTION) {
                    avatarNameTF.selectAll();
                    return;
                }
            }

            avatarRenderer.getAvatarCharacter().getAttributes().setName(avatarNameTF.getText());
            avatarManager.saveAvatar(avatarNameTF.getText(), avatarRenderer.getAvatarCharacter());
            currentAvatarSelection = avatarNameTF.getText();
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    avatarList.setSelectedValue(avatarNameTF.getText(), rootPaneCheckingEnabled);
                }
            });
            
        } catch (ContentRepositoryException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_addBActionPerformed

    private void applyDefaultBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_applyDefaultBActionPerformed
        final String selected = (String) avatarList.getSelectedValue();

        if (selected==null)
            return;

        final JFrame f = this;
        f.setCursor(waitCursor);

        Thread t = new Thread() {
            public void run() {
                AvatarConfigManager.getAvatarConigManager().setDefaultAvatarName(selected);
                AvatarConfigComponent configComponent = avatarRenderer.getCell().getComponent(AvatarConfigComponent.class);
                URL selectedURL = AvatarConfigManager.getAvatarConigManager().getNamedAvatarServerURL(
                                (String)avatarList.getSelectedValue(),
                                avatarRenderer.getCell().getCellCache().getSession().getSessionManager());
                if (selectedURL!=null)
                    configComponent.requestConfigChange(selectedURL);
                else
                    Logger.getLogger(AvatarConfigFrame.class.getName()).warning("Unable to apply null default avatar");
                f.setCursor(normalCursor);
            }
        };
        t.start();
}//GEN-LAST:event_applyDefaultBActionPerformed

    private void avatarListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_avatarListValueChanged
        if (evt.getValueIsAdjusting())
            return;


    }//GEN-LAST:event_avatarListValueChanged

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        String selected = (String) avatarList.getSelectedValue();
        if (selected == null)
            return;

        int index = avatarList.getSelectedIndex();
        avatarManager.deleteAvatar(selected);

        if (index>1)
            avatarList.setSelectedIndex(index-1);
        else
            avatarList.setSelectedIndex(0);
    }//GEN-LAST:event_deleteBActionPerformed

    private void viewBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBActionPerformed
        String selected = (String) avatarList.getSelectedValue();

        if (selected==null || selected.equals(currentAvatarSelection))
            return;

        URL selectedURL = AvatarConfigManager.getAvatarConigManager().getNamedAvatarURL((String)avatarList.getSelectedValue());
        WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
        ServerSessionManager manager = session.getSessionManager();
        String serverHostAndPort = manager.getServerNameAndPort();
        final WlAvatarCharacter avatarCharacter = new WlAvatarCharacter(selectedURL,
                ClientContextJME.getWorldManager(),
                "wla://avatarbaseart@"+serverHostAndPort+"/");

        EventQueue.invokeLater(new Runnable() {
            public void run() {
                avatarRenderer.changeAvatar(avatarCharacter);
            }
        });

        currentAvatarSelection = selected;
}//GEN-LAST:event_viewBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addB;
    private javax.swing.JButton applyDefaultB;
    private javax.swing.JList avatarList;
    private javax.swing.JScrollPane avatarListScrollPane;
    private javax.swing.JTextField avatarNameTF;
    private javax.swing.JButton deleteB;
    private javax.swing.JRadioButton femaleRB;
    private javax.swing.ButtonGroup genderGrou;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JRadioButton maleRB;
    private javax.swing.JButton randomizeB;
    private javax.swing.JButton viewB;
    // End of variables declaration//GEN-END:variables

}
