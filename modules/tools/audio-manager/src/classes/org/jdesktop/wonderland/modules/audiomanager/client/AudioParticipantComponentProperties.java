/*
 * AudioParticipantComponentProperties.java
 *
 * Created on May 27, 2009, 12:45 PM
 */

package org.jdesktop.wonderland.modules.audiomanager.client;

import javax.swing.JPanel;

import org.jdesktop.wonderland.modules.audiomanager.common.AudioParticipantComponentServerState;

import org.jdesktop.wonderland.client.cell.properties.annotation.CellComponentProperties;

import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;

import org.jdesktop.wonderland.client.cell.properties.spi.CellComponentPropertiesSPI;

import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.common.cell.state.CellComponentServerState;

/**
 *
 * @author  jp
 */
@CellComponentProperties
public class AudioParticipantComponentProperties extends javax.swing.JPanel implements CellComponentPropertiesSPI {

    private CellPropertiesEditor editor;

    /** Creates new form AudioParticipantComponentProperties */
    public AudioParticipantComponentProperties() {
        initComponents();
    }

    /**
     * @{inheritDoc}
     */
    public Class getServerCellComponentClass() {
        return AudioParticipantComponentServerState.class;
    }

    /**
     * @{inheritDoc}
     */
    public String getDisplayName() {
        return "Audio Participant Component";
    }

    /**
     * @{inheritDoc}
     */
    public JPanel getPropertiesJPanel(CellPropertiesEditor editor) {
        this.editor = editor;
        return this;
    }

    /**
     * @{inheritDoc}
     */
    public <T extends CellServerState> void updateGUI(T cellServerState) {
        CellComponentServerState state = cellServerState.getComponentServerState(AudioParticipantComponentServerState.class);
        if (state == null) {
	    return;
	}

        //originalName = ((AudioParticipantComponentServerState)state).getName();
        //originalFullVolumeRadius = ((AudioParticipantComponentServerState)state).getFullVolumeRadius();
        //nameTextField.setText(originalName);
        //fullVolumeRadiusSpinner.setValue(originalFullVolumeRadius);
    }

    /**
     * @{inheritDoc}
     */
    public <T extends CellServerState> void getCellServerState(T cellServerState) {
        // Figure out whether there already exists a server state for the
        // component.
        CellComponentServerState state = cellServerState.getComponentServerState(AudioParticipantComponentServerState.class);
        if (state == null) {
            state = new AudioParticipantComponentServerState();
        }

	
        //((AudioParticipantComponentServerState)state).setName(nameTextField.getText());
        //Float value = (Float)fullVolumeRadiusModel.getValue();
        //((AudioParticipantComponentServerState)state).setFullVolumeRadius(value);
        cellServerState.addComponentServerState(state);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
