/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2008, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * $Revision$
 * $Date$
 * $State$
 */
package org.jdesktop.wonderland.client.jme.artimport;

import com.jme.scene.Node;
import com.jme.scene.Spatial;
import java.awt.Component;
import java.util.LinkedList;
import javax.swing.JLabel;
import javax.swing.JTree;
import javax.swing.event.TreeModelListener;
import javax.swing.event.TreeSelectionEvent;
import javax.swing.event.TreeSelectionListener;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeCellRenderer;
import javax.swing.tree.TreeModel;
import javax.swing.tree.TreePath;
import org.jdesktop.mtgame.Entity;
import org.jdesktop.mtgame.SceneComponent;


/**
 *
 * @author  paulby
 */
public class SceneGraphViewFrame extends javax.swing.JFrame {

    private DefaultMutableTreeNode rootNode;
    
    /** Creates new form SceneGraphViewFrame */
    public SceneGraphViewFrame() {
        initComponents();
        jTree1.setCellRenderer(new JmeTreeCellRenderer());
        jTree1.addTreeSelectionListener(new TreeSelectionListener() {

            public void valueChanged(TreeSelectionEvent e) {
                Object selectedNode = jTree1.getLastSelectedPathComponent();
                System.out.println("Selected "+selectedNode);
            }
            
        });
    }
    
    public void addEntity(Entity entity) {
        Node sceneRoot = ((SceneComponent)entity.getComponent(SceneComponent.class)).getSceneRoot();
        
        jTree1.setModel(new JmeTreeModel(sceneRoot));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        jPanel1.setLayout(new java.awt.BorderLayout());

        jTree1.setModel(null);
        jTree1.setScrollsOnExpand(false);
        jScrollPane1.setViewportView(jTree1);

        jPanel1.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    class JmeTreeModel implements TreeModel {

        private Spatial root;
        private LinkedList<TreeModelListener> modelListeners = new LinkedList();
        
        public JmeTreeModel(Spatial node) {
            root = node;
        }
        
        public Object getRoot() {
            return root;
        }

        public Object getChild(Object parent, int index) {
            return ((Node)parent).getChild(index);
        }

        public int getChildCount(Object parent) {
            if (parent instanceof Node)
                return ((Node)parent).getQuantity();
            else 
                return 0;
        }

        public boolean isLeaf(Object node) {
            return (getChildCount(node)==0);
        }

        public void valueForPathChanged(TreePath path, Object newValue) {
            throw new UnsupportedOperationException("Not supported yet.");
        }

        public int getIndexOfChild(Object parent, Object child) {
            return ((Node)parent).getChildIndex((Node)child);
        }

        public void addTreeModelListener(TreeModelListener l) {
            modelListeners.add(l);
        }

        public void removeTreeModelListener(TreeModelListener l) {
            modelListeners.remove(l);
        }
    }
    
    class JmeTreeCellRenderer extends DefaultTreeCellRenderer {
        
        @Override
        public Component getTreeCellRendererComponent(JTree tree,
                                               Object value,
                                               boolean selected,
                                               boolean expanded,
                                               boolean leaf,
                                               int row,
                                               boolean hasFocus) {
            String name = ((Spatial)value).getName();
            if (name==null)
                name="";
            return new JLabel(getTrimmedClassname(value)+":"+name);
        }       
        
        /**
         * Return the classname of the object, trimming off the package name
         * @param o
         * @return
         */
        private String getTrimmedClassname(Object o) {
            String str = o.getClass().getName();
            
            return str.substring(str.lastIndexOf('.')+1);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

}
