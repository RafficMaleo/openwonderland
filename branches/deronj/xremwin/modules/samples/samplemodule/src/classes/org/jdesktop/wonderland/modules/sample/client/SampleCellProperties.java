/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

package org.jdesktop.wonderland.modules.sample.client;

import javax.swing.JPanel;
import org.jdesktop.wonderland.client.cell.properties.annotation.CellProperties;
import org.jdesktop.wonderland.client.cell.properties.CellPropertiesEditor;
import org.jdesktop.wonderland.client.cell.properties.spi.CellPropertiesSPI;
import org.jdesktop.wonderland.common.cell.state.CellServerState;
import org.jdesktop.wonderland.modules.sample.common.SampleCellServerState;

/**
 * A property sheet for the sample cell type
 *
 * @author Jordan Slott <jslott@dev.java.net>
 */
@CellProperties
public class SampleCellProperties extends javax.swing.JPanel implements CellPropertiesSPI {
    CellPropertiesEditor editor = null;
    private String originalShapeType = null;

    /** Creates new form SampleCellProperties */
    public SampleCellProperties() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        shapeTypeComboBox = new javax.swing.JComboBox();

        jLabel1.setText("Shape Type:");

        shapeTypeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "BOX", "SPHERE" }));
        shapeTypeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeTypeActionPerformed(evt);
            }
        });
        shapeTypeComboBox.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                shapeTypePropertyChange(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(shapeTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 230, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(54, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(shapeTypeComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(139, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void shapeTypePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_shapeTypePropertyChange
        // If the shape type has changed since the initial value, then
        // set the dirty bit to try
        String newShapeType = (String)shapeTypeComboBox.getSelectedItem();
        if (originalShapeType != null && originalShapeType.equals(newShapeType) == false) {
            editor.setPanelDirty(SampleCellProperties.class, true);
        }
        else {
            editor.setPanelDirty(SampleCellProperties.class, false);
        }
    }//GEN-LAST:event_shapeTypePropertyChange

    private void shapeTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeTypeActionPerformed
        // TODO add your handling code here:
        // If the shape type has changed since the initial value, then
        // set the dirty bit to try
        String newShapeType = (String)shapeTypeComboBox.getSelectedItem();
        if (originalShapeType != null && originalShapeType.equals(newShapeType) == false) {
            editor.setPanelDirty(SampleCellProperties.class, true);
        }
        else {
            editor.setPanelDirty(SampleCellProperties.class, false);
        }
    }//GEN-LAST:event_shapeTypeActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JComboBox shapeTypeComboBox;
    // End of variables declaration//GEN-END:variables

    public Class getServerCellStateClass() {
       return SampleCellServerState.class;
    }

    public String getDisplayName() {
        return "Sample Cell";
    }

    public JPanel getPropertiesJPanel(CellPropertiesEditor editor) {
        this.editor = editor;
        return this;
    }

    public <T extends CellServerState> void updateGUI(T cellServerState) {
        SampleCellServerState state = (SampleCellServerState)cellServerState;
        originalShapeType = state.getShapeType();
        shapeTypeComboBox.setSelectedItem(originalShapeType);
    }

    public <T extends CellServerState> void getCellServerState(T state) {
       ((SampleCellServerState)state).setShapeType((String)shapeTypeComboBox.getSelectedItem());
    }
}
