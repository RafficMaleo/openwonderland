/*
 * UserListJFrame.java
 *
 * Created on January 22, 2009, 2:52 PM
 */

package org.jdesktop.wonderland.modules.audiomanager.client;

import org.jdesktop.wonderland.modules.presencemanager.client.PresenceManager;
import org.jdesktop.wonderland.modules.presencemanager.client.PresenceManagerListener;
import org.jdesktop.wonderland.modules.presencemanager.client.PresenceManagerFactory;

import org.jdesktop.wonderland.modules.presencemanager.common.PresenceInfo;

import org.jdesktop.wonderland.client.comms.WonderlandSession;

import org.jdesktop.wonderland.common.auth.WonderlandIdentity;

import java.util.ArrayList;

import java.awt.Point;

/**
 *
 * @author  jp
 */
public class UserListJFrame extends javax.swing.JFrame implements PresenceManagerListener {

    private WonderlandSession session;
    private AudioManagerClient client;

    private PresenceManager pm;

    /** Creates new form UserListJFrame */
    public UserListJFrame(WonderlandSession session, AudioManagerClient client) {
	this.session = session;
	this.client = client;

        initComponents();

	setTitle("Users");

	pm = PresenceManagerFactory.getPresenceManager(session);
	pm.addPresenceManagerListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        userList = new javax.swing.JList();

        userList.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(userList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 260, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 203, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void done() {
	setVisible(false);
    }

    private String[] userData;

    public void setUserList() {
	WonderlandIdentity[] userIDArray = pm.getAllUsers();

	String[] userData = new String[userIDArray.length];

	for (int i = 0; i < userIDArray.length; i++) {
	    userData[i] = userIDArray[i].getUsername();
	}

	setUserList(userData);
    }

    public void setUserList(String[] userData) {
	this.userData = userData;

	userList.setListData(userData);
    }

    public void setSpeaking(String callID, boolean isSpeaking) {
	//System.out.println("Got message for " + presenceInfo
	//    + (isSpeaking ? " Started Speaking" : " Stopped Speaking"));

        PresenceManager pm = PresenceManagerFactory.getPresenceManager(session);

	PresenceInfo info = pm.getPresenceInfo(callID);

	if (info == null) {
	    System.out.println("SetSpeaking unable to get username for callID " + callID);
	    return;
	}

	String username = info.userID.getUsername();

        WonderlandIdentity[] userIDArray = pm.getAllUsers();

        String[] userData = new String[userIDArray.length];

        for (int i = 0; i < userIDArray.length; i++) {
	    String user = userIDArray[i].getUsername();

	    if (username.equals(user) && isSpeaking) {
		user += "...";
	    } 

            userData[i] = user;
        }

	setUserList(userData);
    }

    public void muteCall(String callID, boolean isMuted) {
	//System.out.println(presenceInfo + (isMuted ? "Muted" : "Unmuted"));

        PresenceManager pm = PresenceManagerFactory.getPresenceManager(session);

	PresenceInfo info = pm.getPresenceInfo(callID);

	if (info == null) {
	    System.out.println("SetSpeaking unable to get username for callID " + callID);
	    return;
	}

	String username = info.userID.getUsername();

        WonderlandIdentity[] userIDArray = pm.getAllUsers();

        String[] userData = new String[userIDArray.length];

        for (int i = 0; i < userIDArray.length; i++) {
	    String user = userIDArray[i].getUsername();

	    if (username.equals(user) && isMuted) {
		user = "[" + user + "]";
	    } 

            userData[i] = user;
        }

	setUserList(userData);
    }

    public void userAdded(PresenceInfo presenceInfo) {
	setUserList();
    }

    public void userRemoved(PresenceInfo presenceInfo) {
	setUserList();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList userList;
    // End of variables declaration//GEN-END:variables

}
