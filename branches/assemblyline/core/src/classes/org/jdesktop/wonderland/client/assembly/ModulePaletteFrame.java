/*
 * ModulePaletteFrame.java
 *
 * Created on October 30, 2008, 1:53 PM
 */

package org.jdesktop.wonderland.client.assembly;

import java.util.Collection;
import java.util.Iterator;
import javax.swing.AbstractListModel;
import org.jdesktop.wonderland.client.ClientContext;
import org.jdesktop.wonderland.client.cell.CellEditChannelConnection;
import org.jdesktop.wonderland.client.comms.WonderlandServerInfo;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.modules.CachedModule;
import org.jdesktop.wonderland.client.modules.ServerCache;
import org.jdesktop.wonderland.common.cell.CellEditConnectionType;
import org.jdesktop.wonderland.common.cell.messages.CellEditMessage;
import org.jdesktop.wonderland.common.cell.messages.CellEditMessage.EditType;
import org.jdesktop.wonderland.common.modules.ModuleArtList;

/**
 *
 * @author  jordanslott
 */
public class ModulePaletteFrame extends javax.swing.JFrame {
    /* The cache of modules from a server */
    private ServerCache serverCache = null;
    
    /** Creates new form ModulePaletteFrame */
    public ModulePaletteFrame() {
        initComponents();
        
        /*
         * Load the list of modules from the web server
         */
        this.serverCache = new ServerCache("server");
        Collection<String> moduleNames = serverCache.getModuleNames();
        Iterator<String> it = moduleNames.iterator();
        System.out.println("MODULE LIST " + moduleNames.size());
        while (it.hasNext() == true) {
            /*
             * Fetch the art for the module. If there is none, then do no add
             * it to the list
             */
            String moduleName = it.next();
            ModuleArtList artList = this.serverCache.getModule(moduleName).getArt();
            if (artList.getModuleArt().length > 0) {
                moduleListComboBox.addItem(moduleName);
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        moduleListComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        moduleAssetList = new javax.swing.JList();
        importButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Module Palette");
        setName("Module Palette"); // NOI18N

        moduleListComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moduleListActionPerformed(evt);
            }
        });

        jScrollPane1.setViewportView(moduleAssetList);

        importButton.setText("Import");
        importButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 275, Short.MAX_VALUE)
                    .add(moduleListComboBox, 0, 275, Short.MAX_VALUE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, importButton))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(moduleListComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 441, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(importButton)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void moduleListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moduleListActionPerformed
    /* Fetch the list of assets (loading if necessary) and populate the list */
    String moduleName = (String)moduleListComboBox.getSelectedItem();
    CachedModule cachedModule = this.serverCache.getModule(moduleName);
    final ModuleArtList artList = cachedModule.getArt();

    /* Create a new model based upon the stuff in the list of art */
    moduleAssetList.setModel(new AbstractListModel() {

            public int getSize() {
                return artList.getModuleArt().length;
            }

            public Object getElementAt(int index) {
                return artList.getModuleArt()[index].getPath();
            }
    });    
}//GEN-LAST:event_moduleListActionPerformed

private void importActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importActionPerformed
    /* Fetch the selected model name and art path */
    String moduleName = (String)moduleListComboBox.getSelectedItem();
    String artPath = (String)moduleAssetList.getSelectedValue();
    
    System.out.println("SELECTED " + moduleName + " " + artPath);
    
    WonderlandServerInfo server = ClientContext.getWonderlandSessionManager().getPrimaryServer();
    WonderlandSession session = ClientContext.getWonderlandSessionManager().getSession(server);
    CellEditChannelConnection connection = (CellEditChannelConnection)session.getConnection(CellEditConnectionType.CLIENT_TYPE);
    CellEditMessage msg = new CellEditMessage(null);
    msg.setEditTpe(EditType.CREATE_CELL);
    msg.setAssetURI("wla://" + moduleName + "/" + artPath);
    connection.send(msg);
}//GEN-LAST:event_importActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ModulePaletteFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton importButton;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList moduleAssetList;
    private javax.swing.JComboBox moduleListComboBox;
    // End of variables declaration//GEN-END:variables

}
