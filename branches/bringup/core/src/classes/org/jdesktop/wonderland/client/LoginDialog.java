/**
* Project Looking Glass
*
* $RCSfile: LoginDialog.java,v $
*
* Copyright (c) 2004-2007, Sun Microsystems, Inc., All Rights Reserved
*
* Redistributions in source code form must reproduce the above
* copyright and this condition.
*
* The contents of this file are subject to the GNU General Public
* License, Version 2 (the "License"); you may not use this file
* except in compliance with the License. A copy of the License is
* available at http://www.opensource.org/licenses/gpl-license.php.
*
* $Revision: 1.15 $
* $Date: 2007/10/24 00:28:30 $
* $State: Exp $
*/ 

package org.jdesktop.wonderland.client;

import java.awt.EventQueue;
import java.awt.Image;
import java.net.URL;
import javax.imageio.ImageIO;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFrame;
import org.jdesktop.lg3d.wonderland.config.client.AvatarClientConfig;
import org.jdesktop.lg3d.wonderland.config.client.WonderlandClientConfig;
import org.jdesktop.lg3d.wonderland.config.common.WonderlandConfigUtil;
import org.jdesktop.lg3d.wonderland.darkstar.client.ChannelController;
import org.jdesktop.lg3d.wonderland.darkstar.client.SipStarter.AudioQuality;
import org.jdesktop.lg3d.wonderland.darkstar.common.NetworkAddress;

/**
 *
 * @author  jkaplan
 */
public class LoginDialog extends JFrame {
    
    private static LoginDialog loginDialog;
    
    /** Creates new form LoginDialog */
    public LoginDialog() {
        initComponents();
        
        WonderlandClientConfig config = WonderlandClientConfig.getDefault();
        setWorldName(config.getWorldName());
        setTagLine(config.getTagLine());
        String server = System.getProperty("sgs.server");
        if (server!=null) {
            serverComboBox.addItem(server);
            serverComboBox.setSelectedItem(server);
        }
        
        String serverPort = System.getProperty("sgs.port");
	if (serverPort != null)
	    serverPortTextField.setText(serverPort);

        // get the default username
        String username = AvatarClientConfig.getDefault().getUsername();
        if (username == null) {
            username = System.getProperty("user.name");
        }
        if (username != null) {
            usernameField.setText(username);
            passwordField.requestFocus();
        }

	localIPAddressComboBox.setModel(
		new DefaultComboBoxModel(NetworkAddress.getNetworkAddresses()));
	localIPAddressComboBox.setSelectedItem(NetworkAddress.getDefaultNetworkAddress());
    }
     
    public static LoginDialog getLoginDialog() {
        if (loginDialog == null) {
            loginDialog = new LoginDialog();
        }
        
        return loginDialog;
    }
    
    public void setWorldName(String worldName) {
        worldNameLabel.setText(worldName);
    }
    
    public String getWorldName() {
        return worldNameLabel.getText();
    }
    
    public void setTagLine(String tagLine) {
        tagLineLabel.setText(tagLine);
    }
    
    public String getTagLine() {
        return tagLineLabel.getText();
    }
    
    public void setError(String error) {
        errorLabel.setText(error);
    }
    
    public String getError() {
        return errorLabel.getText();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        bGImagePanel1 = new org.jdesktop.lg3d.wonderland.BgImagePanel();
        usernameField = new javax.swing.JTextField();
        passwordField = new javax.swing.JPasswordField();
        serverComboBox = new javax.swing.JComboBox();
        loginButton = new javax.swing.JButton();
        getRootPane().setDefaultButton(loginButton);
        worldNameLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        usernameLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        passwordLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        serverLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        cancelButton = new javax.swing.JButton();
        tagLineLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        errorLabel = new javax.swing.JLabel();
        localIPAddressLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        localIPAddressComboBox = new javax.swing.JComboBox();
        serverPortLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        serverPortTextField = new javax.swing.JTextField();
        audioQualityLabel = new org.jdesktop.lg3d.wonderland.DropShadowJLabel();
        audioQualityComboBox = new javax.swing.JComboBox();

        setTitle("Login");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });

        Image i = null;
        try {
            URL u = getClass().getResource("resources/login-dialog-bg.png");
            i = ImageIO.read(u);
        } catch (Exception ex) {
            // oh well
            ex.printStackTrace();
        }
        bGImagePanel1.setImage(i);
        bGImagePanel1.setPreferredSize(new java.awt.Dimension(800, 600));

        usernameField.setFont(new java.awt.Font("Dialog", 0, 24));

        passwordField.setFont(new java.awt.Font("Dialog", 0, 24));
        passwordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passwordFieldActionPerformed(evt);
            }
        });

        serverComboBox.setEditable(true);
        serverComboBox.setFont(new java.awt.Font("Dialog", 1, 24));
        serverComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "localhost" }));

        loginButton.setFont(new java.awt.Font("Dialog", 1, 18));
        loginButton.setText("Login");
        loginButton.setSelected(true);
        loginButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loginButtonActionPerformed(evt);
            }
        });

        worldNameLabel.setText("World Name");
        worldNameLabel.setFont(new java.awt.Font("Arial", 1, 48));
        worldNameLabel.setShadowOpacity(0.25F);

        usernameLabel.setText("Username:");
        usernameLabel.setFont(new java.awt.Font("Arial", 1, 24));
        usernameLabel.setOffsetLeft(-2.0F);
        usernameLabel.setOffsetTop(2.0F);
        usernameLabel.setShadowOpacity(0.25F);

        passwordLabel.setText("Password:");
        passwordLabel.setFont(new java.awt.Font("Arial", 1, 24));
        passwordLabel.setOffsetLeft(-2.0F);
        passwordLabel.setOffsetTop(2.0F);
        passwordLabel.setShadowOpacity(0.25F);

        serverLabel.setText("Server Name:");
        serverLabel.setFont(new java.awt.Font("Arial", 1, 24));
        serverLabel.setOffsetLeft(-2.0F);
        serverLabel.setOffsetTop(2.0F);
        serverLabel.setShadowOpacity(0.25F);

        cancelButton.setFont(new java.awt.Font("Dialog", 1, 18));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        tagLineLabel.setText("Tag Line");
        tagLineLabel.setFont(new java.awt.Font("Arial", 1, 36));
        tagLineLabel.setOffsetLeft(-2.0F);
        tagLineLabel.setOffsetTop(2.0F);
        tagLineLabel.setShadowOpacity(0.25F);

        errorLabel.setFont(new java.awt.Font("Arial", 1, 18));
        errorLabel.setForeground(java.awt.Color.red);
        errorLabel.setText(" ");

        localIPAddressLabel.setText("Local IP Address:");
        localIPAddressLabel.setFont(new java.awt.Font("Arial", 1, 24));
        localIPAddressLabel.setOffsetLeft(-2.0F);
        localIPAddressLabel.setOffsetTop(2.0F);
        localIPAddressLabel.setShadowOpacity(0.25F);

        localIPAddressComboBox.setEditable(true);
        localIPAddressComboBox.setFont(new java.awt.Font("Dialog", 1, 24));
        localIPAddressComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "localhost" }));
        localIPAddressComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localIPAddressComboBoxActionPerformed(evt);
            }
        });

        serverPortLabel.setText("Server Port:");
        serverPortLabel.setFont(new java.awt.Font("Arial", 1, 24));
        serverPortLabel.setOffsetLeft(-2.0F);
        serverPortLabel.setOffsetTop(2.0F);
        serverPortLabel.setShadowOpacity(0.25F);

        serverPortTextField.setFont(new java.awt.Font("Dialog", 0, 24));

        audioQualityLabel.setText("Audio Quality:");
        audioQualityLabel.setFont(new java.awt.Font("Arial", 1, 24));
        audioQualityLabel.setOffsetLeft(-2.0F);
        audioQualityLabel.setOffsetTop(2.0F);
        audioQualityLabel.setShadowOpacity(0.25F);

        audioQualityComboBox.setFont(new java.awt.Font("Dialog", 1, 18));
        audioQualityComboBox.setModel(new DefaultComboBoxModel(AudioQuality.values()));
        audioQualityComboBox.setPreferredSize(new java.awt.Dimension(50, 32));
        audioQualityComboBox.setSelectedItem(WonderlandClientConfig.getDefault().getAudioQuality());
        audioQualityComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                audioQualityComboBoxActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout bGImagePanel1Layout = new javax.swing.GroupLayout(bGImagePanel1);
        bGImagePanel1.setLayout(bGImagePanel1Layout);
        bGImagePanel1Layout.setHorizontalGroup(
            bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bGImagePanel1Layout.createSequentialGroup()
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(bGImagePanel1Layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tagLineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(worldNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(bGImagePanel1Layout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(errorLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 381, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bGImagePanel1Layout.createSequentialGroup()
                        .addGap(198, 198, 198)
                        .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(bGImagePanel1Layout.createSequentialGroup()
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(serverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(serverPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(localIPAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(audioQualityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serverPortTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                            .addComponent(serverComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(passwordField, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(usernameField, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 351, Short.MAX_VALUE)
                            .addComponent(localIPAddressComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(audioQualityComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 5, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, bGImagePanel1Layout.createSequentialGroup()
                        .addContainerGap(587, Short.MAX_VALUE)
                        .addComponent(cancelButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(loginButton)))
                .addGap(67, 67, 67))
        );
        bGImagePanel1Layout.setVerticalGroup(
            bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(bGImagePanel1Layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addComponent(worldNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tagLineLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addComponent(errorLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(usernameField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(usernameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(passwordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(passwordLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(serverPortLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(serverPortTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(localIPAddressLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(localIPAddressComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(audioQualityLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(audioQualityComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addGroup(bGImagePanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cancelButton)
                    .addComponent(loginButton))
                .addContainerGap())
        );

        getContentPane().add(bGImagePanel1, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void localIPAddressComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_localIPAddressComboBoxActionPerformed
	Object item = localIPAddressComboBox.getSelectedItem();

	if (item instanceof NetworkAddress) {
	    NetworkAddress.setDefaultNetworkAddress(
		    (NetworkAddress)localIPAddressComboBox.getSelectedItem());

	} else if (item instanceof String) {
	    NetworkAddress na = NetworkAddress.addAddress("", (String)item, true);

	    if (na != null)
		localIPAddressComboBox.setModel(
			new DefaultComboBoxModel(NetworkAddress.getNetworkAddresses()));

	    localIPAddressComboBox.setSelectedItem(
		    NetworkAddress.getDefaultNetworkAddress());
	}

    }//GEN-LAST:event_localIPAddressComboBoxActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // close the dialog -- and exit the app
        setVisible(false);
        System.exit(0);
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void passwordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passwordFieldActionPerformed
        if (loginButton.isEnabled()) {
            doLogin();
        }
    }//GEN-LAST:event_passwordFieldActionPerformed

    private void loginButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loginButtonActionPerformed
        doLogin();
    }
    
    void doLogin() {
        String userName = usernameField.getText();
        char[] password = passwordField.getPassword();

        String serverName = (String) serverComboBox.getSelectedItem();
        String serverPort = serverPortTextField.getText();
        
        AudioQuality quality = (AudioQuality) audioQualityComboBox.getSelectedItem();
        
	System.setProperty("sgs.server", serverName);
	System.setProperty("sgs.port", serverPort);

        loginButton.setEnabled(false);
        setError("Connecting...");
        
        // start communications
        final ChannelController c = ChannelController.getController();
        c.initCommunications(userName, password, serverName, serverPort, quality);
        
        // wait for a login result
        Runnable r = new Runnable () {
            public void run() {
                final ChannelController.LoginResult res = c.waitForLogin();
                switch (res.getStatus()) {
                    case SUCCESS:
                        // login succeeded
                        EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                setError("Login succeeded.");
                                setVisible(false);
                            }
                        });
                        
                        // store the user name
                        AvatarClientConfig acc = AvatarClientConfig.getDefault();
                        acc.setUsername(usernameField.getText());
                        WonderlandConfigUtil.writeUserConfig(acc);
                        
                        // store the audio quality
                        WonderlandClientConfig wcc = WonderlandClientConfig.getDefault();
                        wcc.setAudioQuality((AudioQuality) audioQualityComboBox.getSelectedItem());
                        WonderlandConfigUtil.writeUserConfig(wcc);
                        
                        // enable the main window
                        Main.getMain().enableMainWindow();
                        break;
                    case BAD_AUTH:
                        // login failed
                        EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                String reason = "Login error. ";
                                if (res.getReason() != null) {
                                    reason = res.getReason() + ". ";
                                }
                                reason += "Please try again.";
                                setError(reason);
                                loginButton.setEnabled(true);
                                passwordField.requestFocus();
                            }
                        });
                        break;
                    case BAD_SERVER:
                        // server not up
                        EventQueue.invokeLater(new Runnable() {
                            public void run() {
                                String reason = "Login error. ";
                                if (res.getReason() != null) {
                                    reason = res.getReason() + ". ";
                                }
                                reason += "Please try again.";
                                setError(reason);
                                loginButton.setEnabled(true);
                                serverComboBox.requestFocus();
                            }
                        });
                        break;
                }
            }
        };
        new Thread(r).start();
    }//GEN-LAST:event_loginButtonActionPerformed
     
    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void audioQualityComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_audioQualityComboBoxActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_audioQualityComboBoxActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new LoginDialog().setVisible(true);
            }
        });
    }
   
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox audioQualityComboBox;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel audioQualityLabel;
    private org.jdesktop.lg3d.wonderland.BgImagePanel bGImagePanel1;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel errorLabel;
    private javax.swing.JComboBox localIPAddressComboBox;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel localIPAddressLabel;
    private javax.swing.JButton loginButton;
    private javax.swing.JPasswordField passwordField;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel passwordLabel;
    private javax.swing.JComboBox serverComboBox;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel serverLabel;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel serverPortLabel;
    private javax.swing.JTextField serverPortTextField;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel tagLineLabel;
    private javax.swing.JTextField usernameField;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel usernameLabel;
    private org.jdesktop.lg3d.wonderland.DropShadowJLabel worldNameLabel;
    // End of variables declaration//GEN-END:variables
    
}
