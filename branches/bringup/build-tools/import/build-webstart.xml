<project basedir="." default="..." name="wonderland.build-pkg-webstart">
    <target name="pkg-webstart-init">
        <property name="debug.level" value="lines,source"/>
        <antcall target="jar"/>
        
        <property name="release.webstart.dir" location="${release.platform.dir}/../webstart"/>
        
        <mkdir dir="${release.webstart.dir}"/>
        <mkdir dir="${release.webstart.dir}/config-webstart"/>
        
        <condition property="use.jmf">
            <istrue value="${jmf.enabled}"/>
        </condition>
    </target>
    
    <target name="pkg-webstart" 
            depends="pkg-webstart-init, compile-servlet, -do-pkg-webstart, -do-pkg-war"
            description="Build Webstart Release"/>
   
    <target name="-do-pkg-webstart" depends="jar-xremwin, jar-jmf, -set-jmf-extension">     
        <copy todir="${release.webstart.dir}">
            <fileset dir="${build.lib.dir}">
                <include name="wonderland-client.jar"/>
                <include name="wonderland-utils.jar"/>
                <include name="bean-builder.jar"/>
            </fileset>
            
	    <!-- TODO: do this in a platform independent way -->
            <fileset dir="ext/linux/jars">
                <include name="escher-0.2.2.lg.jar"/>
            </fileset>
  
          <!-- Darkstar should be delivered as a jnlp extension -->
            <fileset dir="ext/sgs/darkstar/lib">
                <include name="sgs-client.jar"/>
                <include name="mina-core-*.jar"/>
                <include name="slf4j-api-*.jar"/>
                <include name="slf4j-jdk14-*.jar"/>
            </fileset>
            
            <fileset dir="ext/common">
                <include name="derby.jar"/>
                <include name="swing-layout-1.0.jar"/>
                <include name="j3d-contrib-utils.jar"/>
                <include name="lg3d-core.jar"/>
                <include name="commons-beanutils-core.jar"/>
                <include name="commons-logging-1.1.jar"/>
                <include name="TimingFramework.jar"/>
            </fileset>
  
            <fileset dir="ext/${ostype}/jars">
                <include name="jinput.jar"/>
            </fileset>
        </copy>
         
        <!-- handle softphone for voice-enabled installations -->
        <if>
            <istrue value="${voicebridge.enabled}"/>
            <then>
                <copy todir="${release.webstart.dir}">
                    <fileset dir="ext/voicebridge">
                        <include name="softphone.jar"/>
                    </fileset>
                </copy>
            </then>
        </if>
        
        <!-- copy any module client jar files -->
        <if>
            <istrue value="${use.modules}"/>
            <then>
                <copy todir="${release.webstart.dir}">
                    <fileset dir="${modules.dir}">
                        <include name="**/dist/client/*.jar"/>
                    </fileset>
                    <mapper type="flatten"/>
                </copy>
            </then>
        </if>
        
        <!-- copy jmf jar files -->
        <if>
            <istrue value="${use.jmf}"/>
            <then>
                <copy todir="${release.webstart.dir}">
                    <fileset dir="ext/common">
                        <include name="commons-cli-1.0.jar"/>
                        <include name="commons-codec-1.3.jar"/>
                        <include name="commons-httpclient-3.0.1.jar"/>
                        <include name="servlet-api.jar"/>
                    </fileset>
  
                    <fileset dir="ext/${ostype}/jars">
                        <include name="jipcam.jar"/>
                    </fileset>
                </copy>
            </then>
        </if>
        
        <!-- copy configuration files -->
        <copy todir="${release.webstart.dir}/config-webstart">
            <fileset dir="src/config">
                <include name="**"/>
            </fileset>
        </copy>

        <!-- create a temporary file and store local jar names to it -->
        <tempfile property="local_jars.file" destDir="${build.dir}"/>

        <!-- generate a list of jar files to put in the jnlp -->
        <pathconvert property="jnlp.jars" pathsep=",">
            <path>
                <fileset dir="${release.webstart.dir}">
                    <include name="**/*.jar"/>
                    <exclude name="xremwin-webstart-*.jar"/>
		    <exclude name="libEscher-*_so.jar"/>
                    <exclude name="jmf/jmf-webstart-*.jar"/>
                </fileset>
            </path>
            <mapper type="flatten"/>
        </pathconvert>
        <for param="module.jar.name" list="${jnlp.jars}">
            <sequential>
		<echo file="${local_jars.file}" append="true">
    <![CDATA[<jar href="]]>@{module.jar.name}<![CDATA["/>]]></echo>
	    </sequential>
	</for>
         
        <!-- set the main property -->
        <replace file="${local_jars.file}">
            <replacetoken><![CDATA[<jar href="wonderland-client.jar"/>]]></replacetoken>
            <replacevalue><![CDATA[<jar href="wonderland-client.jar" main="true"/>]]></replacevalue>
        </replace>
        
        <!-- read the local jar files into a property -->
        <loadfile property="local.jars" srcfile="${local_jars.file}"/>
        <delete file="${local_jars.file}"/>
        
        <filterset begintoken="%" endtoken="%" id="jnlp.filter">
            <filter token="SGS_SERVER" value="${sgs.server}"/>
            <filter token="SGS_PORT" value="${sgs.port}"/>
            <filter token="JNLP_CODEBASE" value="${jnlp.codebase}"/>
            <filter token="LOCAL_JAR_FILES" value="${local.jars}"/>
            <filter token="JMF_EXTENSION" value="${jmf.extension}"/>
            <filter token="ARGS" value=""/>
        </filterset>
        
        <!-- copy the jnlp file, substitute in relevant values -->
        <copy todir="${release.webstart.dir}" overwrite="true">        
            <fileset dir="${build-webstart.dir}">
                <include name="Wonderland.jnlp"/>
            </fileset>  
            <filterset refid="jnlp.filter"/>
        </copy>
        
        <!-- copy jmf jnlp file if relevant -->
        <if>
            <istrue value="${use.jmf}"/>
            <then>
                <copy todir="${release.webstart.dir}">
                    <fileset dir="${build-webstart.dir}">
                        <include name="JMF.jnlp"/>
                    </fileset>
                    <filterset refid="jnlp.filter"/>
                </copy>
            </then>
        </if>
        
        <!-- make sure we have a keystore -->
        <condition property="keystore.exists">
            <available file="${wonderland.keystore}"/>
        </condition>
        <fail message="Keystore ${wonderland.keystore} not found!"
              unless="keystore.exists"/>
        
        <!-- sign and pack200 all jars -->
        <for param="sign.jar.name">
            <fileset dir="${release.webstart.dir}">
                <include name="**/*.jar"/>
		<exclude name="xremwin-webstart-*.jar"/>
            </fileset>
            <sequential>
                <if>
                    <not><uptodate targetfile="@{sign.jar.name}.pack.gz"
                                   srcfile="@{sign.jar.name}"/></not>
                    <then>
                        <pack200 src="@{sign.jar.name}"
                                 destfile="@{sign.jar.name}.repack.jar"
                                 repack="true"
                                 segmentlimit="-1"/>
                        <signjar jar="@{sign.jar.name}.repack.jar"
                                 keystore="${wonderland.keystore}"
                                 alias="${wonderland.keystore.alias}"
                                 storepass="${wonderland.keystore.password}"
                                 signedjar="@{sign.jar.name}.repack.sign.jar"/>
                        <pack200 src="@{sign.jar.name}.repack.sign.jar"
                                 gzipoutput="true"
                                 destfile="@{sign.jar.name}.pack.gz"
                                 segmentlimit="-1"/>
                                 
                        <!-- copy over the original jar with the signed version.
                             Force an overwrite, since ant will sometimes decide
                             the files are the same age if the packing happens
                             quickly -->
                        <copy file="@{sign.jar.name}.repack.sign.jar"
                              tofile="@{sign.jar.name}"
                              overwrite="true"/>
                        
                        <!-- remove intermediate files -->
                        <delete file="@{sign.jar.name}.repack.jar"/>
                        <delete file="@{sign.jar.name}.repack.sign.jar"/>
                    </then>
                </if>
	    </sequential>
	</for>

	<!-- The xremwin jar is too big for pack200 to handle: it blows
	     the java heap. Skip it, because xremwin doesn't benefit
	     from pack200 anyway -->
        <for param="sign.jar.name">
            <fileset dir="${release.webstart.dir}">
		<include name="xremwin-webstart-*.jar"/>
            </fileset>
            <sequential>
                <signjar jar="@{sign.jar.name}"
                         keystore="${wonderland.keystore}"
                         alias="${wonderland.keystore.alias}"
                         storepass="${wonderland.keystore.password}"
                         lazy="true"/>
	    </sequential>
	</for>
    </target>

    <target name="-do-pkg-war" description="Create a web-app of Wonderland">
        <!-- create directory structure -->
        <property name="release.war.dir" value="${release.webstart.dir}/war"/>
        <mkdir dir="${release.war.dir}"/>
        <mkdir dir="${release.war.dir}/WEB-INF"/>
        <mkdir dir="${release.war.dir}/WEB-INF/lib"/>
        <mkdir dir="${release.war.dir}/app"/>
        
        <!-- copy the index page -->
        <copy file="${build-webstart.dir}/index.html"
              todir="${release.war.dir}"/>
        
        <!-- copy web.xml and jnlp-servlet.jar -->
        <copy file="${build-webstart.dir}/web.xml"
              todir="${release.war.dir}/WEB-INF"/>
        <copy file="ext/common/deployment-servlet-1.0beta.jar"
              todir="${release.war.dir}/WEB-INF/lib"/>
        <copy file="${build.lib.dir}/wonderland-servlet.jar"
              todir="${release.war.dir}/WEB-INF/lib"/>
              
        <!-- update the JNLP file appropriately -->
        <filterset begintoken="%" endtoken="%" id="war.jnlp.filter">
            <filter token="SGS_SERVER" value="${sgs.server}"/>
            <filter token="SGS_PORT" value="${sgs.port}"/>
            <filter token="JNLP_CODEBASE" value="$$$codebase"/>
            <filter token="LOCAL_JAR_FILES" value="${local.jars}"/>
            <filter token="JMF_EXTENSION" value="${jmf.extension}"/>
            <filter token="ARGS" value="$$$args"/>
        </filterset>
        
        <!-- copy jnlp files -->
        <copy todir="${release.war.dir}/app" overwrite="true">        
            <fileset dir="${build-webstart.dir}">
                <include name="Wonderland.jnlp"/>
            </fileset>  
            <filterset refid="war.jnlp.filter"/>
        </copy>
        
        <!-- copy jmf jnlp file if relevant -->
        <if>
            <istrue value="${use.jmf}"/>
            <then>
                <mkdir dir="${release.war.dir}/jmf"/>
                <copy todir="${release.war.dir}/app">
                    <fileset dir="${build-webstart.dir}">
                        <include name="JMF.jnlp"/>
                    </fileset>
                    <filterset refid="war.jnlp.filter"/>
                </copy>
            </then>
        </if>
        
        <!-- copy jar files, making sure to preserve the last modified date -->
        <copy todir="${release.war.dir}/app" preservelastmodified="true">
             <fileset dir="${release.webstart.dir}">
                 <include name="**/*.jar"/>
                 <include name="**/*.jar.pack.gz"/>
                 <exclude name="war/**"/>
             </fileset>
         </copy>
        
        <!-- create a war file of the given directory -->
        <jar compress="true" destfile="${release.webstart.dir}/wonderland.war"
             basedir="${release.war.dir}"/>
       
        <!-- clean up -->
        <delete dir="${release.war.dir}"/>
    </target>

    <target name="compile-servlet" description="Build servlets">
        <javac  debug="${build.debug}"
                debuglevel="${build.debuglevel}"
		deprecation="${build.showdeprecation}" 
		destdir="${build.classes.dir}" 
		nowarn="true" 
		source="1.5" 
		target="1.5"
                srcdir="${javasrc.dir}">
            <include name="org/jdesktop/lg3d/wonderland/servlet/**"/>
            
            <!-- To add something to the classpath: -->
            <classpath>
		<pathelement path="${wonderland-client-compile.classpath}"/>
                <path location="ext/common/servlet-api.jar"/>
                <path location="ext/common/deployment-servlet-1.0beta.jar"/>
            </classpath>
        </javac>
        
        <jar compress="true" jarfile="${build.lib.dir}/wonderland-servlet.jar">
            <fileset dir="${build.classes.dir}">
                <include name="org/jdesktop/lg3d/wonderland/servlet/**"/>
            </fileset>
        </jar>
    </target>
    
    <property name="appshare.data.dir" value="${wonderland.dir}/data/Wonderland/test/appshare"/>
    <property name="build.date.marker" value="build-date-${build.stamp}"/>
    <property name="appshare.build.date.marker" value="${appshare.data.dir}/${build.date.marker}"/>

    <target name="xremwin-date-marker" description="Build the xremwin jar for linux">
      <delete>
        <fileset dir="${appshare.data.dir}/" includes="build-date-*"/>
      </delete>
      <touch file="${appshare.build.date.marker}"/>
    </target>

    <target name="jar-xremwin-os" depends="-create-xremwin-jar-os, -create-escher-jar-os"/>
    
    <target name="-create-xremwin-jar-os" depends="-check-xremwin-os" 
            unless="uptodate.xremwin.os"
            description="Build the xremwin.webstart.jar for a specific os">
                
	<!-- Bundle Xvfb, related scripts and sample openoffice document -->
	<unpack-java-ext pkgname="xremwin" srcdir="${zip.javaext.dir}/${webstart.os.type}"
					   destdir="${javaext.dir}/${webstart.os.type}"/>

	<jar compress="${jar.compress}"
	      jarfile="${release.webstart.dir}/${xremwin.webstart.prefix}-${webstart.os.suffix}.jar">
            <manifest/>
	    <!-- build date marker must be first -->
            <fileset dir="${appshare.data.dir}/" includes="${build.date.marker}"/>
            <fileset dir="${wonderland.scripts.dir}/" includes="runxremwin"/>
            <fileset dir="${wonderland.scripts.dir}/" includes="ffsetup"/>
            <fileset dir="${javaext.dir}/" includes="${webstart.os.type}/bin/Xvfb"/>
            <fileset dir="${appshare.data.dir}/" includes="ffcenter.zip"/>
            <fileset dir="${appshare.data.dir}/" includes="ffright.zip"/>
            <fileset dir="${appshare.data.dir}/" includes="OH07MPK20-revised.odp"/>
	</jar>
    </target>
    
    <target name="-check-xremwin-os" description="check if xremwin is up to date">
        <!-- TO DO - check if we need to rebuild the xremwin jar -->
        <!-- If the xremwin jar is up to date, set the variable
             uptodate.xremwin.os -->
    </target>
    
    <target name="-create-escher-jar-os" depends="-check-escher-os"
            unless="uptodate.escher.os"
            description="Build the libEscher_so.jar for a specific os">
            
	<!-- Bundle escher -->
	<unpack-java-ext pkgname="escher" srcdir="${zip.javaext.dir}/${webstart.os.type}"
					  destdir="${javaext.dir}/${webstart.os.type}"/>
	<jar compress="${jar.compress}" 
	     jarfile="${release.webstart.dir}/libEscher-${webstart.os.suffix}_so.jar">
	  <manifest/>
	  <fileset dir="ext/${webstart.os.type}/native/" includes="libEscher.so"/>
	</jar>
    </target>

    <target name="-check-escher-os" description="check if libEscher is up to date">
        <uptodate property="uptodate.escher.os"
                  srcfile="${zip.javaext.dir}/${webstart.os.type}/escher.zip"
                  targetfile="${release.webstart.dir}/libEscher-${webstart.os.suffix}_so.jar"/>
    </target>
    
    <target name="jar-xremwin" depends="compile,xremwin-date-marker" 
            description="Build the xremwin jars for linux/solaris client webstart">     

	<antcall target="jar-xremwin-os">
	    <param name="webstart.os.type" value="linux"/>
	    <param name="webstart.os.suffix" value="linux-i386"/>
	</antcall>

	<antcall target="jar-xremwin-os">
	    <param name="webstart.os.type" value="solaris"/>
	    <param name="webstart.os.suffix" value="solaris-x86"/>
	</antcall>
    </target>

    <target name="jar-jmf-os" depends="-check-jmf-os" unless="uptodate.jmf.os"
            description="Build the jmf-webstart.jar for a specific os">
        <mkdir dir="${build.dir}/tmp/${webstart.os.type}"/>
        
	<!-- Bundle jmf -->
	<unpack-java-ext pkgname="jmf" srcdir="${zip.javaext.dir}/${webstart.os.type}"
					  destdir="${build.dir}/tmp/${webstart.os.type}"/>
                         
        <!-- update jmf jar with jmf properties and updated RegistryLib class -->
        <jar jarfile="${build.dir}/tmp/${webstart.os.type}/jars/jmf.jar"
             update="true">
             
             <fileset dir="${build.dir}/tmp/${webstart.os.type}/jars">
                 <include name="jmf.properties"/>
             </fileset>
             
             <fileset dir="${build.classes.dir}">
                 <include name="com/sun/media/util/*.class"/>
             </fileset>
        </jar>
              
         <!-- copy updated jar file -->
        <copy file="${build.dir}/tmp/${webstart.os.type}/jars/jmf.jar"
              tofile="${release.webstart.dir}/jmf/jmf-webstart-${webstart.os.suffix}.jar"/>
        
        <!-- package native libraries (if any) -->
        <if>
            <available file="${build.dir}/tmp/${webstart.os.type}/native" type="dir"/>
            <then>
                <jar jarfile="${release.webstart.dir}/jmf/jmf-webstart-native-${webstart.os.suffix}.jar"
                     compress="true"> 
                    <fileset dir="${build.dir}/tmp/${webstart.os.type}/native">
                        <include name="**"/>
                    </fileset>
                </jar>
            </then>
        </if>
        
        <!-- remove temporary directory -->
	<delete dir="${build.dir}/tmp/${webstart.os.type}"/>
    </target>

    <target name="-check-jmf-os" 
            description="check if the jmf.jar is more up to date then jmf.zip">

        <uptodate property="uptodate.jmf.os"
                  srcfile="${zip.javaext.dir}/${webstart.os.type}/jmf.zip"
                  targetfile="${release.webstart.dir}/jmf/jmf-webstart-${webstart.os.suffix}.jar"/>
    </target>
    
    <target name="jar-jmf" depends="compile" if="use.jmf" 
            description="Build the jmf jars for webstart">     

        <mkdir dir="${release.webstart.dir}/jmf"/>   
         
        <!-- create a temporary file and store extension html in it -->
        <tempfile property="jmf_extension.file" destDir="${build.dir}"/>
        <echo file="${jmf_extension.file}">
    <![CDATA[<extension href="JMF.jnlp"/>]]></echo>
        <loadfile property="jmf.extension" srcfile="${jmf_extension.file}"/>
        <delete file="${jmf_extension.file}"/>
        
        <antcall target="jar-jmf-os">
	    <param name="webstart.os.type" value="linux"/>
	    <param name="webstart.os.suffix" value="linux-i386"/>
	</antcall>

        <antcall target="jar-jmf-os">
	    <param name="webstart.os.type" value="win32"/>
	    <param name="webstart.os.suffix" value="win32"/>
	</antcall>
        
        <antcall target="jar-jmf-os">
	    <param name="webstart.os.type" value="macosx"/>
	    <param name="webstart.os.suffix" value="macosx"/>
	</antcall>
        
	<antcall target="jar-jmf-os">
	    <param name="webstart.os.type" value="solaris"/>
	    <param name="webstart.os.suffix" value="solaris-x86"/>
	</antcall>
    </target>
    
    <target name="-set-jmf-extension" unless="jmf.extension"
            description="set the jmf extension property if use.jmf is false">
        <property name="jmf.extension" value=""/>
    </target>
</project>
