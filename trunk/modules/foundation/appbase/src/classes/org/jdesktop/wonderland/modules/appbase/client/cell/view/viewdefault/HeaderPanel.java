/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.appbase.client.cell.view.viewdefault;

import java.awt.Color;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.SwingUtilities;

/**
 *
 * @author dj
 */
public class HeaderPanel extends javax.swing.JPanel {

    public interface Container {
        // TODO: add call backs to FrameHeaderSwing

        public void close();
    }
    private Container container;

    public void setContainer(Container container) {
        this.container = container;
    }

    /** Creates new form HeaderPanel */
    public HeaderPanel() {
        initComponents();

        jButton1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToolBar1 = new javax.swing.JToolBar();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();

        jToolBar1.setRollover(true);

        setMaximumSize(new java.awt.Dimension(32767, 24));
        setMinimumSize(new java.awt.Dimension(50, 24));
        setPreferredSize(new java.awt.Dimension(422, 24));

        jLabel1.setFont(jLabel1.getFont().deriveFont(jLabel1.getFont().getStyle() | java.awt.Font.BOLD, jLabel1.getFont().getSize()+2));
        java.util.ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/modules/appbase/client/Bundle"); // NOI18N
        jLabel1.setText(bundle.getString("HeaderPanel.jLabel1.text")); // NOI18N

        jLabel2.setFont(jLabel2.getFont().deriveFont(jLabel2.getFont().getStyle() | java.awt.Font.BOLD, jLabel2.getFont().getSize()+2));
        jLabel2.setText(bundle.getString("HeaderPanel.jLabel2.text")); // NOI18N

        jButton1.setFont(new java.awt.Font("DejaVu Sans", 0, 10)); // NOI18N
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/window-close24x24.png"))); // NOI18N
        jButton1.setMaximumSize(new java.awt.Dimension(24, 24));
        jButton1.setMinimumSize(new java.awt.Dimension(24, 24));
        jButton1.setPreferredSize(new java.awt.Dimension(24, 24));
        jButton1.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/appbase/client/cell/view/viewdefault/resources/window-close24x24.png"))); // NOI18N

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(24, 24, 24)
                .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 202, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(48, 48, 48)
                .add(jLabel2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 106, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                        .add(jLabel1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 24, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .add(jButton1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JToolBar jToolBar1;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setBackground(final Color color) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.setBackground(color);
                if (jLabel1 != null) {
                    jLabel1.setBackground(color);
                }
                if (jLabel2 != null) {
                    jLabel2.setBackground(color);
                }
                if (jButton1 != null) {
                    jButton1.setBackground(color);
                }
            }
        });
    }

    @Override
    public void setForeground(final Color color) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.setForeground(color);
                if (jLabel1 != null) {
                    jLabel1.setForeground(color);
                }
                if (jLabel2 != null) {
                    jLabel2.setForeground(color);
                }
                if (jButton1 != null) {
                    jButton1.setForeground(color);
                }
            }
        });
    }

    @Override
    public void addMouseListener(final MouseListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.addMouseListener(listener);
                if (jLabel1 != null) {
                    jLabel1.addMouseListener(listener);
                }
                if (jLabel2 != null) {
                    jLabel2.addMouseListener(listener);
                }
                if (jButton1 != null) {
                    jButton1.addMouseListener(listener);
                }
            }
        });
    }

    @Override
    public void removeMouseListener(final MouseListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.removeMouseListener(listener);
                if (jLabel1 != null) {
                    jLabel1.removeMouseListener(listener);
                }
                if (jLabel2 != null) {
                    jLabel2.removeMouseListener(listener);
                }
                if (jButton1 != null) {
                    jButton1.removeMouseListener(listener);
                }
            }
        });

    }

    @Override
    public void addMouseMotionListener(final MouseMotionListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.addMouseMotionListener(listener);
                if (jLabel1 != null) {
                    jLabel1.addMouseMotionListener(listener);
                }
                if (jLabel2 != null) {
                    jLabel2.addMouseMotionListener(listener);
                }
                if (jButton1 != null) {
                    jButton1.addMouseMotionListener(listener);
                }
            }
        });
    }

    @Override
    public void removeMouseMotionListener(final MouseMotionListener listener) {
        SwingUtilities.invokeLater(new Runnable() {

            public void run() {
                HeaderPanel.super.removeMouseMotionListener(listener);
                if (jLabel1 != null) {
                    jLabel1.removeMouseMotionListener(listener);
                }
                if (jLabel2 != null) {
                    jLabel2.removeMouseMotionListener(listener);
                }
                if (jButton1 != null) {
                    jButton1.removeMouseMotionListener(listener);
                }
            }
        });
    }

    public void setTitle(String title) {
        if (title == null) {
            title = " ";
        }
        final String theTitle = title;
        if (jLabel1 != null) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    jLabel1.setText(theTitle);
                }
            });
        }
    }

    public void setController(String controller) {
        if (controller == null) {
            controller = " ";
        }
        final String theController = controller;
        if (jLabel1 != null) {
            SwingUtilities.invokeLater(new Runnable() {

                public void run() {
                    jLabel2.setText(theController);
                }
            });
        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {
        if (container != null) {
            container.close();
        }
    }
}
        
