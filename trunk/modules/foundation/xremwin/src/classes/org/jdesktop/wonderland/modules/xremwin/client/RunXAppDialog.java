/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * CellFactoryRunApp.java
 *
 * Created on Apr 19, 2009, 1:04:13 PM
 */

package org.jdesktop.wonderland.modules.xremwin.client;

import java.util.StringTokenizer;

/**
 *
 * @author dj
 */
public class RunXAppDialog extends javax.swing.JDialog {

    private boolean cancelled;
    private String appName;
    private String command;
    private boolean persistFlag;
    private boolean privateFlag = true;

    /** Creates new form CellFactoryRunApp */
    public RunXAppDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        appNameLabel = new javax.swing.JLabel();
        appNameTextField = new javax.swing.JTextField();
        commandLabel = new javax.swing.JLabel();
        commandTextField = new javax.swing.JTextField();
        rememberCheckBox = new javax.swing.JCheckBox();
        availableAllCheckBox = new javax.swing.JCheckBox();
        rememberOnlyButton = new javax.swing.JButton();
        rememberAndRunButton = new javax.swing.JButton();
        runButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        appNameLabel.setText("App Name");

        commandLabel.setText("Command");

        rememberCheckBox.setText("Remember this entry");
        // TODO: for now
        rememberCheckBox.setEnabled(false);
        
        availableAllCheckBox.setText("Available to all users");
        availableAllCheckBox.setEnabled(false);
        // TODO: enable only if remember = true

        rememberOnlyButton.setText("Remember Only");
        rememberOnlyButton.setEnabled(false);
        // TODO: enable only if remember = true

        rememberAndRunButton.setText("Remember and Run");
        rememberAndRunButton.setEnabled(false);
        // TODO: enable only if remember = true

        runButton.setText("Run");
        runButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                runButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(rememberCheckBox)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                                .add(rememberOnlyButton)
                                .add(availableAllCheckBox))
                            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(rememberAndRunButton))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(appNameLabel)
                            .add(18, 18, 18)
                            .add(appNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 269, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                        .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                            .add(commandLabel)
                            .add(18, 18, 18)
                            .add(commandTextField))))
                .addContainerGap(44, Short.MAX_VALUE))
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .add(94, 94, 94)
                .add(cancelButton)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 116, Short.MAX_VALUE)
                .add(runButton)
                .add(110, 110, 110))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(30, 30, 30)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(appNameLabel)
                    .add(appNameTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(commandLabel)
                    .add(commandTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(rememberCheckBox)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(availableAllCheckBox)
                .add(32, 32, 32)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(rememberOnlyButton)
                    .add(rememberAndRunButton))
                .add(27, 27, 27)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(runButton)
                    .add(cancelButton))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void runButtonActionPerformed(java.awt.event.ActionEvent evt) {                                             
        cancelled = false;
        dispose();
}                                            

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        cancelled = true;
        dispose();
}//GEN-LAST:event_cancelButtonActionPerformed

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                RunXAppDialog dialog = new RunXAppDialog(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel appNameLabel;
    private javax.swing.JTextField appNameTextField;
    private javax.swing.JCheckBox availableAllCheckBox;
    private javax.swing.JButton cancelButton;
    private javax.swing.JLabel commandLabel;
    private javax.swing.JTextField commandTextField;
    private javax.swing.JButton rememberAndRunButton;
    private javax.swing.JCheckBox rememberCheckBox;
    private javax.swing.JButton rememberOnlyButton;
    private javax.swing.JButton runButton;
    // End of variables declaration//GEN-END:variables

    public boolean succeeded () {
        if (cancelled) return false;
        command = commandTextField.getText();
        return command != null && command.trim().length() > 0;
    }

    public String getAppName () {
        String appNameStr = appNameTextField.getText();
        if (appNameStr != null && appNameStr.trim().length() > 0) {
            return appNameStr;
        } else {
            if (command == null || command.trim().length() <= 0) {
                return "Unknown";
            }
            
            StringTokenizer tok = new StringTokenizer(command);
            if (tok.countTokens() <= 0) {
                return "Unknown";
            }

            // Return the first token
            return tok.nextToken();
        }
    }

    public String getCommand () {
        return command;
    }

    public boolean getPersistFlag () {
        return persistFlag;
    }

    public boolean getPrivateFlag () {
        return privateFlag;
    }
}
