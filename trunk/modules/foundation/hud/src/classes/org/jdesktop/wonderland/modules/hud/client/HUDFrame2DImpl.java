/*
 * Project Wonderland
 * 
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 * 
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 * 
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 * 
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */

/*
 * HUDFrame2DImpl.java
 *
 * Created on Feb 25, 2009, 2:22:20 PM
 */
package org.jdesktop.wonderland.modules.hud.client;

import java.awt.Color;
import java.awt.GradientPaint;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Logger;
import javax.swing.JFrame;

/**
 *
 * @author nsimpson
 */
public class HUDFrame2DImpl extends javax.swing.JPanel {

    private static final Logger logger = Logger.getLogger(HUDFrame2DImpl.class.getName());
    private Color gradientStartColor = new Color(2, 28, 109);
    private Color gradientEndColor = new Color(134, 169, 254);
    private List<ActionListener> listeners;

    public HUDFrame2DImpl() {
        initComponents();

        minimizeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                logger.info("minimize action performed");
                if (listeners != null) {
                    ActionEvent event = new ActionEvent(HUDFrame2DImpl.this, e.getID(), "minimize");
                    for (ActionListener listener:listeners) {
                        listener.actionPerformed(event);
                    }
                }
            }
        });
        
        closeButton.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                logger.info("close action performed");
                if (listeners != null) {
                    ActionEvent event = new ActionEvent(HUDFrame2DImpl.this, e.getID(), "close");
                    for (ActionListener listener:listeners) {
                        listener.actionPerformed(event);
                    }
                }
            }
        });
    }

    public void setGradientStartColor(Color gradientStartColor) {
        this.gradientStartColor = gradientStartColor;
    }

    public Color getGradientStartColor() {
        return gradientStartColor;
    }

    public void setGradientEndColor(Color gradientEndColor) {
        this.gradientEndColor = gradientEndColor;
    }

    public Color getGradientEndColor() {
        return gradientEndColor;
    }

    public void addActionListener(ActionListener listener) {
        if (listeners == null) {
            listeners = Collections.synchronizedList(new ArrayList());
        }
        listeners.add(listener);
    }

    @Override
    public void paint(Graphics g) {
        Graphics2D g2 = (Graphics2D) g;

        GradientPaint paint = new GradientPaint(0, 0, gradientStartColor,
                0, getHeight(), gradientEndColor);
        g2.setPaint(paint);
        g2.fill(g2.getClip());
        this.paintChildren(g);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        minimizeButton = new javax.swing.JButton();
        closeButton = new javax.swing.JButton();

        minimizeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/hud/client/resources/minimize16x16.png"))); // NOI18N
        minimizeButton.setBorderPainted(false);
        minimizeButton.setIconTextGap(0);
        minimizeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        minimizeButton.setMaximumSize(new java.awt.Dimension(16, 16));
        minimizeButton.setMinimumSize(new java.awt.Dimension(2, 2));

        closeButton.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/jdesktop/wonderland/modules/hud/client/resources/close16x16.png"))); // NOI18N
        closeButton.setBorderPainted(false);
        closeButton.setIconTextGap(0);
        closeButton.setMargin(new java.awt.Insets(0, 0, 0, 0));
        closeButton.setMaximumSize(new java.awt.Dimension(16, 16));
        closeButton.setMinimumSize(new java.awt.Dimension(2, 2));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(384, Short.MAX_VALUE)
                .add(minimizeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0)
                .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 19, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(0, 0, 0))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(closeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .add(minimizeButton, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 20, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
    }// </editor-fold>//GEN-END:initComponents

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton closeButton;
    private javax.swing.JButton minimizeButton;
    // End of variables declaration//GEN-END:variables

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                JFrame frame = new JFrame("HUD Frame test");
                frame.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                frame.add(new HUDFrame2DImpl());
                frame.pack();
                frame.setVisible(true);
            }
        });
    }
}
