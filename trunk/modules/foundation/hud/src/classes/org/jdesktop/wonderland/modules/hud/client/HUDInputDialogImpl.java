/*
 * Project Wonderland
 * 
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 * 
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 * 
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 * 
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.hud.client;

import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeSupport;

/**
 * A Swing dialog to display on the HUD.
 *
 * @author nsimpson
 */
public class HUDInputDialogImpl extends javax.swing.JDialog {

    PropertyChangeSupport listeners;

    public HUDInputDialogImpl(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        listeners = new PropertyChangeSupport(this);
    }

    /**
     * Sets the string to be displayed on the text field label
     * @param text the string to display
     */
    public void setLabelText(String text) {
        valueLabel.setText(text);
    }

    /**
     * Gets the string displayed on the text field label
     * @return the text field label
     */
    public String getLabelText() {
        return valueLabel.getText();
    }

    /**
     * Sets the string displayed in the text field
     * @param text the string to display
     */
    public void setValueText(String text) {
        valueTextField.setText(text);
    }

    /**
     * Gets the string entered by the user in the text field
     * @return the text field string
     */
    public String getValueText() {
        return valueTextField.getText();
    }

    /**
     * Displays or hides the dialog and resets the value field
     * @param visible if true displays the dialog, if false, hides the dialog
     */
    @Override
    public void setVisible(boolean visible) {
        if (visible == true) {
            valueTextField.setText(null);
        }
        super.setVisible(visible);
    }

    /**
     * Sets the label on the confirm (OK) button
     * @param label the label to display
     */
    public void setConfirmButtonLabel(String label) {
        okButton.setText(label);
    }

    /**
     * Gets the label on the confirm (OK) button
     * @return the label displayed on the button (defaults to "OK")
     */
    public String getConfirmButtonLabel() {
        return okButton.getText();
    }

    /**
     * Sets the label on the cancel button
     * @param label the label to display
     */
    public void setCancelButtonLabel(String label) {
        cancelButton.setText(label);
    }

    /**
     * Gets the label on the cancel button
     * @return the label displayed on the button (defaults to "Cancel")
     */
    public String getCancelButtonLabel() {
        return cancelButton.getText();
    }

    /**
     * Adds a bound property listener to the dialog
     * @param listener a listener for dialog events
     */
    @Override
    public synchronized void addPropertyChangeListener(PropertyChangeListener listener) {
        listeners.addPropertyChangeListener(listener);
    }

    /**
     * Removes a bound property listener from the dialog
     * @param listener the listener to remove
     */
    @Override
    public synchronized void removePropertyChangeListener(PropertyChangeListener listener) {
        listeners.removePropertyChangeListener(listener);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        valueLabel = new javax.swing.JLabel();
        valueTextField = new javax.swing.JTextField();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setBackground(javax.swing.UIManager.getDefaults().getColor("OptionPane.background"));

        valueLabel.setFont(new java.awt.Font("Dialog", 1, 13));
        valueLabel.setText("Enter the value:");

        valueTextField.setFont(new java.awt.Font("DialogInput", 0, 13));
        valueTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueTextFieldActionPerformed(evt);
            }
        });

        okButton.setFont(new java.awt.Font("Dialog", 0, 13));
        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });

        cancelButton.setFont(new java.awt.Font("Dialog", 0, 13));
        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(valueLabel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 289, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                        .add(okButton)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                        .add(cancelButton)
                        .add(72, 72, 72))
                    .add(layout.createSequentialGroup()
                        .add(valueTextField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 269, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(12, 12, 12)
                .add(valueLabel)
                .add(7, 7, 7)
                .add(valueTextField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(cancelButton)
                    .add(okButton))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        listeners.firePropertyChange("text", new String(""), new String(valueTextField.getText()));
}//GEN-LAST:event_okButtonActionPerformed

    private void valueTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueTextFieldActionPerformed
        okButton.doClick();
}//GEN-LAST:event_valueTextFieldActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        listeners.firePropertyChange("cancel", new String(""), null);
    }//GEN-LAST:event_cancelButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                HUDInputDialogImpl dialog = new HUDInputDialogImpl(new javax.swing.JFrame(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {

                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                    }
                });
                dialog.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel valueLabel;
    private javax.swing.JTextField valueTextField;
    // End of variables declaration//GEN-END:variables
}
