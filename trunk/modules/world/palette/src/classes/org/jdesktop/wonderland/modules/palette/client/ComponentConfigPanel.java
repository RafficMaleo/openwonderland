/*
 * ComponentConfigPanel.java
 *
 * Created on December 12, 2008, 11:53 AM
 */

package org.jdesktop.wonderland.modules.palette.client;

import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import org.jdesktop.wonderland.client.cell.registry.CellComponentFactory;
import org.jdesktop.wonderland.common.cell.state.CellServerState;

/**
 * A configuration panel for the Cell Edit frame that displays all of the
 * components in the system and whether they are enabled on the Cell
 * 
 * @author Jordan Slott <jslott@dev.java.net>
 */
public class ComponentConfigPanel extends javax.swing.JPanel {

    /* A set of cell component names that are enabled on the cell */
    private Set<String> cellComponentSet = new HashSet();

    private JTable componentTable;
    private ComponentTableModel tableModel;

    /** Creates new form ComponentConfigPanel */
    public ComponentConfigPanel() {
        // Initialize the GUI components
        initComponents();
        
        // Create the JTable, add it to the panel
//        componentTable = new JTable();
//        JScrollPane componentScrollPane = new JScrollPane(componentTable);
//        add(componentScrollPane);
//
//        // Fetch the list of components registered in the system and place them
//        // in the table
//        CellRegistry registry = CellRegistry.getCellRegistry();
//        Set<CellComponentFactory> componentFactories = registry.getAllCellComponentFactories();
//        tableModel = new ComponentTableModel(componentFactories);
//        componentTable.setModel(tableModel);
//
//        // Set the column widths to be a bit more pleasant
//        TableColumn column = null;
//        for (int i = 0; i < tableModel.getColumnCount(); i++) {
//            column = componentTable.getColumnModel().getColumn(i);
//            switch (i) {
//                case 0: column.setPreferredWidth(10); break;
//                case 1: column.setPreferredWidth(100); break;
//                case 2: column.setPreferredWidth(300); break;
//            }
//        }
    }

    /**
     * A table model for the given set of component factories 
     */
    class ComponentTableModel extends AbstractTableModel {
        private List<CellComponentFactory> componentFactories;
              
        /** Constructor, takes the set of component factories */
        public ComponentTableModel(Set<CellComponentFactory> factories) {
            this.componentFactories = new LinkedList(factories);
        }

        public int getRowCount() {
            return componentFactories.size();
        }

        public int getColumnCount() {
            return 3;
        }

        @Override
        public String getColumnName(int column) {
            switch (column) {
                case 0: return "Enabled";
                case 1: return "Component Name";
                case 2: return "Component Description";
            }
            return null;
        }

        @Override
        public Class getColumnClass(int c) {
            switch (c) {
                case 0: return Boolean.class;
                case 1: return String.class;
                case 2: return String.class;
            }
            return null;
        }
        
        public Object getValueAt(int rowIndex, int columnIndex) {
            CellComponentFactory factory = componentFactories.get(rowIndex);
            switch (columnIndex) {
                case 0: return cellComponentSet.contains(factory.getDisplayName());
                case 1: return factory.getDisplayName();
                case 2: return factory.getDescription();
            }
            return null;
        }
    }
    
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.GridLayout(1, 0));
    }// </editor-fold>//GEN-END:initComponents

    public String getDisplayName() {
        return "Components";
    }

    public <T extends CellServerState> void updateGUI(T setup) {
        // Given the cell setup class, find out which components are enabled
        // on the cell and update the map of boolean values.
//        cellComponentSet.clear();
//        CellComponentServerState[] componentSetups = setup.getCellComponentSetups();
//
//        CellRegistry cellRegistry = CellRegistry.getCellRegistry();
//        for (CellComponentServerState componentSetup : componentSetups) {
//            // Fetch the cell component factory based upon the cell component
//            // setup class name. From that component factory, fetch the display
//            // name and add to the set of components present
//            CellComponentFactory factory = cellRegistry.getCellComponentFactoryByClass(componentSetup.getClass());
//            cellComponentSet.add(factory.getDisplayName());
//        }
//        tableModel.fireTableDataChanged();
    }

    public <T extends CellServerState> void updateCellServerState(T setup) {
        // Find out which cell components are enabled and make sure an
        // appropriate CellComponentSetup class exists on the setup class
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

}
