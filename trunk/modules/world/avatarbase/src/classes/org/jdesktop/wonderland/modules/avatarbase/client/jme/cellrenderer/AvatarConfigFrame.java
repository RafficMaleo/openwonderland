/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AvatarConfigFrame.java
 *
 * Created on Feb 9, 2009, 4:47:34 PM
 */

package org.jdesktop.wonderland.modules.avatarbase.client.jme.cellrenderer;

import imi.character.CharacterAttributes;
import imi.character.avatar.FemaleAvatarAttributes;
import imi.character.avatar.MaleAvatarAttributes;
import imi.gui.JPanel_BasicOptions;
import imi.gui.SceneEssentials;
import java.awt.BorderLayout;
import java.awt.Cursor;
import java.awt.EventQueue;
import java.io.IOException;
import java.net.URL;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import org.jdesktop.mtgame.WorldManager;
import org.jdesktop.wonderland.client.comms.WonderlandSession;
import org.jdesktop.wonderland.client.jme.ClientContextJME;
import org.jdesktop.wonderland.client.login.ServerSessionManager;
import org.jdesktop.wonderland.modules.avatarbase.client.AvatarConfigManager;
import org.jdesktop.wonderland.modules.avatarbase.client.AvatarConfigManager.AvatarManagerListener;
import org.jdesktop.wonderland.modules.avatarbase.client.cell.AvatarConfigComponent;
import org.jdesktop.wonderland.modules.contentrepo.common.ContentRepositoryException;

/**
 *
 * @author paulby
 */
public class AvatarConfigFrame extends javax.swing.JFrame {

    private AvatarImiJME avatarRenderer;
    private AvatarConfigManager avatarManager;

    private String currentAvatarSelection = null;

    private Cursor waitCursor = Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR);
    private Cursor normalCursor = Cursor.getDefaultCursor();

    /** Creates new form AvatarConfigFrame */
    public AvatarConfigFrame(AvatarImiJME avatarRenderer) {
        this.avatarRenderer = avatarRenderer;
        initComponents();
        SceneEssentials scene = new SceneEssentials();
        scene.setAvatar(avatarRenderer.getAvatarCharacter());
        scene.setWM(ClientContextJME.getWorldManager());
        
//        JPanel_BasicOptions basicOptions = new JPanel_BasicOptions(this);
//        basicOptions.setSceneData(scene);
//        basicOptions.avatarCheck();
//        basicOptions.setBaseURL(avatarRenderer.getAvatarCharacter().getAttributes().getBaseURL());
//        scrollPane.getViewport().add(basicOptions);

        WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
        avatarManager = AvatarConfigManager.getAvatarConfigManager();

        DefaultListModel listModel = (DefaultListModel) avatarList.getModel();

        Iterable<String> avatars = avatarManager.getAvatars();
        for(String a : avatars) {
            listModel.addElement(a);
        }

        avatarManager.addAvatarManagerListener(new AvatarManagerListener() {
            public void avatarAdded(String name) {
                ((DefaultListModel) avatarList.getModel()).addElement(name);
            }

            public void avatarRemoved(String name) {
                ((DefaultListModel) avatarList.getModel()).removeElement(name);
            }
        });

        defaultAvatarTF.setText(AvatarConfigManager.getAvatarConfigManager().getDefaultAvatarName());
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        genderGrou = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        defaultAvatarTF = new javax.swing.JTextField();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        chooseAvatarPanel = new javax.swing.JPanel();
        avatarListScrollPane = new javax.swing.JScrollPane();
        avatarList = new javax.swing.JList();
        deleteB = new javax.swing.JButton();
        viewB = new javax.swing.JButton();
        createAvatarPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        maleRB = new javax.swing.JRadioButton();
        femaleRB = new javax.swing.JRadioButton();
        addB = new javax.swing.JButton();
        avatarNameTF = new javax.swing.JTextField();
        randomizeB = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        refineAvatarPanel = new javax.swing.JPanel();
        southPanel = new javax.swing.JPanel();
        saveB = new javax.swing.JButton();
        scrollPane = new javax.swing.JScrollPane();
        notReadWarning = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();

        setTitle("Edit Avatar");

        jLabel2.setText("Current Avatar:");

        chooseAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("My Avatars"));

        avatarList.setModel(new DefaultListModel());
        avatarList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        avatarList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                avatarListValueChanged(evt);
            }
        });
        avatarListScrollPane.setViewportView(avatarList);

        deleteB.setText("Delete");
        deleteB.setToolTipText("Delete selected avatar");
        deleteB.setEnabled(false);
        deleteB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBActionPerformed(evt);
            }
        });

        viewB.setText("Apply");
        viewB.setToolTipText("Apply selected avatar");
        viewB.setEnabled(false);
        viewB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout chooseAvatarPanelLayout = new org.jdesktop.layout.GroupLayout(chooseAvatarPanel);
        chooseAvatarPanel.setLayout(chooseAvatarPanelLayout);
        chooseAvatarPanelLayout.setHorizontalGroup(
            chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(chooseAvatarPanelLayout.createSequentialGroup()
                .addContainerGap()
                .add(avatarListScrollPane, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 159, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(viewB)
                    .add(deleteB))
                .addContainerGap(111, Short.MAX_VALUE))
        );

        chooseAvatarPanelLayout.linkSize(new java.awt.Component[] {deleteB, viewB}, org.jdesktop.layout.GroupLayout.HORIZONTAL);

        chooseAvatarPanelLayout.setVerticalGroup(
            chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(chooseAvatarPanelLayout.createSequentialGroup()
                .add(chooseAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(chooseAvatarPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .add(viewB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(deleteB))
                    .add(avatarListScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Choose Avatar", chooseAvatarPanel);

        createAvatarPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Create New Avatar"));

        jLabel1.setText("Avatar Name:");

        genderGrou.add(maleRB);
        maleRB.setSelected(true);
        maleRB.setText("Male");

        genderGrou.add(femaleRB);
        femaleRB.setText("Female");

        addB.setText("Add to My Avatars");
        addB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBActionPerformed(evt);
            }
        });

        avatarNameTF.setText("my_avatar");

        randomizeB.setText("Randomize");
        randomizeB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                randomizeBActionPerformed(evt);
            }
        });

        jLabel4.setText("Gender:");

        org.jdesktop.layout.GroupLayout createAvatarPanelLayout = new org.jdesktop.layout.GroupLayout(createAvatarPanel);
        createAvatarPanel.setLayout(createAvatarPanelLayout);
        createAvatarPanelLayout.setHorizontalGroup(
            createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(createAvatarPanelLayout.createSequentialGroup()
                .add(54, 54, 54)
                .add(jLabel4)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(addB)
                    .add(randomizeB)
                    .add(createAvatarPanelLayout.createSequentialGroup()
                        .add(maleRB)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(femaleRB)))
                .addContainerGap(99, Short.MAX_VALUE))
            .add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(createAvatarPanelLayout.createSequentialGroup()
                    .add(17, 17, 17)
                    .add(jLabel1)
                    .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                    .add(avatarNameTF, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 251, Short.MAX_VALUE)
                    .add(8, 8, 8)))
        );
        createAvatarPanelLayout.setVerticalGroup(
            createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(createAvatarPanelLayout.createSequentialGroup()
                .add(38, 38, 38)
                .add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(maleRB)
                    .add(jLabel4)
                    .add(femaleRB))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(randomizeB)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(addB)
                .addContainerGap(32, Short.MAX_VALUE))
            .add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                .add(createAvatarPanelLayout.createSequentialGroup()
                    .add(4, 4, 4)
                    .add(createAvatarPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                        .add(jLabel1)
                        .add(avatarNameTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                    .addContainerGap(131, Short.MAX_VALUE)))
        );

        jTabbedPane1.addTab("Create Avatar", createAvatarPanel);

        refineAvatarPanel.setEnabled(false);
        refineAvatarPanel.setLayout(new java.awt.BorderLayout());

        southPanel.setPreferredSize(new java.awt.Dimension(449, 40));

        saveB.setText("Save");
        saveB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout southPanelLayout = new org.jdesktop.layout.GroupLayout(southPanel);
        southPanel.setLayout(southPanelLayout);
        southPanelLayout.setHorizontalGroup(
            southPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(southPanelLayout.createSequentialGroup()
                .add(154, 154, 154)
                .add(saveB)
                .addContainerGap(149, Short.MAX_VALUE))
        );
        southPanelLayout.setVerticalGroup(
            southPanelLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, southPanelLayout.createSequentialGroup()
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .add(saveB)
                .addContainerGap())
        );

        refineAvatarPanel.add(southPanel, java.awt.BorderLayout.SOUTH);

        jLabel3.setText("This will be enabled in Dev #6");

        org.jdesktop.layout.GroupLayout notReadWarningLayout = new org.jdesktop.layout.GroupLayout(notReadWarning);
        notReadWarning.setLayout(notReadWarningLayout);
        notReadWarningLayout.setHorizontalGroup(
            notReadWarningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(notReadWarningLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addContainerGap(394, Short.MAX_VALUE))
        );
        notReadWarningLayout.setVerticalGroup(
            notReadWarningLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(notReadWarningLayout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel3)
                .addContainerGap(362, Short.MAX_VALUE))
        );

        scrollPane.setViewportView(notReadWarning);

        refineAvatarPanel.add(scrollPane, java.awt.BorderLayout.CENTER);

        jTabbedPane1.addTab("Refine Avatar", null, refineAvatarPanel, "Not ready for public testing");

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(org.jdesktop.layout.GroupLayout.TRAILING, jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 399, Short.MAX_VALUE)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(jLabel2)
                        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                        .add(defaultAvatarTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 160, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel2)
                    .add(defaultAvatarTF, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jTabbedPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                .addContainerGap())
        );

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(jPanel1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void randomizeBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_randomizeBActionPerformed
        final JFrame f = this;
        f.setCursor(waitCursor);

        EventQueue.invokeLater(new Runnable() {
            public void run() {

                WlAvatarCharacter avatarCharacter;
                CharacterAttributes attributes;
                String name = avatarNameTF.getText();

                if (femaleRB.isSelected())
                    attributes = new FemaleAvatarAttributes(name, true);
                else
                    attributes = new MaleAvatarAttributes(name, true);

                WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
                ServerSessionManager manager = session.getSessionManager();
                String serverHostAndPort = manager.getServerNameAndPort();
                attributes.setBaseURL("wla://avatarbaseart@"+serverHostAndPort+"/");

                LoadingInfo.startedLoading(avatarRenderer.getCell().getCellID(), name);
                try {
                    WorldManager wm = ClientContextJME.getWorldManager();
                    avatarCharacter = new WlAvatarCharacter(attributes, wm);

                    System.err.println("HEAD "+avatarCharacter.getAttributes().getHeadAttachment());

                } finally {
                    LoadingInfo.finishedLoading(avatarRenderer.getCell().getCellID(), name);
                }

                avatarRenderer.changeAvatar(avatarCharacter);
                f.setCursor(normalCursor);
           }
        });

    }//GEN-LAST:event_randomizeBActionPerformed

    private void addBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBActionPerformed
        final JFrame f = this;
        f.setCursor(waitCursor);
        try {
            if (avatarManager.exists(avatarNameTF.getText())) {
                int option = JOptionPane.showConfirmDialog(this, "An avatar with name exists, overwrite ?", "Avatar Exists", JOptionPane.OK_CANCEL_OPTION);
                if (option == JOptionPane.CANCEL_OPTION) {
                    avatarNameTF.selectAll();
                    return;
                }
            }

            avatarRenderer.getAvatarCharacter().getAttributes().setName(avatarNameTF.getText());
            avatarManager.saveAvatar(avatarNameTF.getText(), avatarRenderer.getAvatarCharacter());
            SwingUtilities.invokeLater(new Runnable() {
                public void run() {
                    avatarList.setSelectedValue(avatarNameTF.getText(), rootPaneCheckingEnabled);
                    applyToServer(avatarNameTF.getText());
                }
            });
            
        } catch (ContentRepositoryException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            f.setCursor(normalCursor);
        }
}//GEN-LAST:event_addBActionPerformed

    private void applyToServer(final String selected) {
        if (selected.equals(currentAvatarSelection))
            return;

        final JFrame f = this;
        f.setCursor(waitCursor);

        Thread t = new Thread() {
            public void run() {
                try {
                    AvatarConfigManager.getAvatarConfigManager().setDefaultAvatarName(selected);
                    AvatarConfigComponent configComponent = avatarRenderer.getCell().getComponent(AvatarConfigComponent.class);
                    URL selectedURL = AvatarConfigManager.getAvatarConfigManager().getNamedAvatarServerURL(
                                    (String)avatarList.getSelectedValue(),
                                    avatarRenderer.getCell().getCellCache().getSession().getSessionManager());
                    if (selectedURL!=null)
                        configComponent.requestConfigChange(selectedURL);
                    else
                        Logger.getLogger(AvatarConfigFrame.class.getName()).warning("Unable to apply null default avatar");
                    defaultAvatarTF.setText(selected);
                    currentAvatarSelection = selected;
                } finally {
                    f.setCursor(normalCursor);
                }
            }
        };
        t.start();
    }

    private void avatarListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_avatarListValueChanged
        if (evt.getValueIsAdjusting())
            return;

        viewB.setEnabled(true);
        deleteB.setEnabled(true);
//        applyDefaultB.setEnabled(true);
    }//GEN-LAST:event_avatarListValueChanged

    private void deleteBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBActionPerformed
        String selected = (String) avatarList.getSelectedValue();
        if (selected == null)
            return;

        int index = avatarList.getSelectedIndex();
        avatarManager.deleteAvatar(selected);

        if (index>1)
            avatarList.setSelectedIndex(index-1);
        else
            avatarList.setSelectedIndex(0);
    }//GEN-LAST:event_deleteBActionPerformed

    private void viewBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBActionPerformed
        String selected = (String) avatarList.getSelectedValue();

        if (selected==null || selected.equals(currentAvatarSelection))
            return;

        final JFrame f = this;
        f.setCursor(waitCursor);
        URL selectedURL = AvatarConfigManager.getAvatarConfigManager().getNamedAvatarURL((String)avatarList.getSelectedValue());
        WonderlandSession session = avatarRenderer.getCell().getCellCache().getSession();
        ServerSessionManager manager = session.getSessionManager();
        String serverHostAndPort = manager.getServerNameAndPort();
        final WlAvatarCharacter avatarCharacter = new WlAvatarCharacter(selectedURL,
                ClientContextJME.getWorldManager(),
                "wla://avatarbaseart@"+serverHostAndPort+"/");

        EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    avatarRenderer.changeAvatar(avatarCharacter);
                } finally {
                    f.setCursor(normalCursor);
                }
            }
        });

        applyToServer(selected);
}//GEN-LAST:event_viewBActionPerformed

    private void saveBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBActionPerformed
        try {
            avatarManager.saveAvatar(defaultAvatarTF.getText(), avatarRenderer.getAvatarCharacter());
        } catch (ContentRepositoryException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(AvatarConfigFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
}//GEN-LAST:event_saveBActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addB;
    private javax.swing.JList avatarList;
    private javax.swing.JScrollPane avatarListScrollPane;
    private javax.swing.JTextField avatarNameTF;
    private javax.swing.JPanel chooseAvatarPanel;
    private javax.swing.JPanel createAvatarPanel;
    private javax.swing.JTextField defaultAvatarTF;
    private javax.swing.JButton deleteB;
    private javax.swing.JRadioButton femaleRB;
    private javax.swing.ButtonGroup genderGrou;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JRadioButton maleRB;
    private javax.swing.JPanel notReadWarning;
    private javax.swing.JButton randomizeB;
    private javax.swing.JPanel refineAvatarPanel;
    private javax.swing.JButton saveB;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JPanel southPanel;
    private javax.swing.JButton viewB;
    // End of variables declaration//GEN-END:variables

}
