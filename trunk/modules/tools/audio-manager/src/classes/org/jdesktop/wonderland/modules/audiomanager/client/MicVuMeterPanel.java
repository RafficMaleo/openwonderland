/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2009, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * Sun designates this particular file as subject to the "Classpath"
 * exception as provided by Sun in the License file that accompanied
 * this code.
 */
package org.jdesktop.wonderland.modules.audiomanager.client;

import java.io.IOException;

import org.jdesktop.wonderland.client.jme.Meter;
import org.jdesktop.wonderland.client.softphone.MicrophoneInfoListener;
import org.jdesktop.wonderland.client.softphone.SoftphoneControl;
import org.jdesktop.wonderland.client.softphone.SoftphoneControlImpl;
import org.jdesktop.wonderland.client.softphone.SoftphoneListener;

import javax.swing.SpinnerNumberModel;

/**
 * A microphone level control panel.
 *
 * @author jp
 * @author nsimpson
 */
public class MicVuMeterPanel extends javax.swing.JPanel implements SoftphoneListener,
        MicrophoneInfoListener, DisconnectListener {

    private AudioManagerClient client;
    private Meter meter;

    private SpinnerNumberModel micVolumeModel;

    public MicVuMeterPanel() {
        this(null);
    }

    public MicVuMeterPanel(AudioManagerClient client) {
        this.client = client;

        initComponents();

	micVolumeModel = new SpinnerNumberModel(new Float(1), new Float(0),
	    new Float(10), new Float(.05));

	micVolumeSpinner.setModel(micVolumeModel);

        if (client != null) {
            client.addDisconnectListener(this);
        }

        meter = new Meter("");
        meter.setPreferredSize(vuMeterPanel.getPreferredSize());
        meter.setMaxValue(1D);
        meter.setWarningValue(0.90);
        meter.setVisible(true);

        vuMeterPanel.add(meter);
        validate();
        vuMeterPanel.setVisible(true);

        startVuMeter(true);
    }

    public void disconnected() {
        startVuMeter(false);
    }

    public void startVuMeter(final boolean startVuMeter) {
        SoftphoneControl sc = SoftphoneControlImpl.getInstance();

        client.removeDisconnectListener(this);

        sc.removeSoftphoneListener(this);
        sc.removeMicrophoneInfoListener(this);

        if (startVuMeter) {
            client.addDisconnectListener(this);
            sc.addSoftphoneListener(this);
            sc.addMicrophoneInfoListener(this);

            try {
                sc.sendCommandToSoftphone("getMicrophoneVolume");
            } catch (IOException e) {
                System.out.println("Unable to get Microphone volume:  " + e.getMessage());
            }
        }

        sc.startVuMeter(startVuMeter);

        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                setVisible(startVuMeter);
            }
        });
    }

    public void softphoneVisible(boolean isVisible) {
    }

    public void softphoneMuted(boolean muted) {
    }

    public void softphoneConnected(boolean connected) {
        SoftphoneControlImpl.getInstance().startVuMeter(connected);
    }

    public void softphoneExited() {
    }

    public void microphoneGainTooHigh() {
    }
    private static final int VU_COUNT = 10;
    private int count;
    private double volume;

    public void microphoneData(String data) {
        if (count == VU_COUNT) {
            count = 0;

            volume = Math.round(Math.sqrt(volume) * 100) / 100D;

            java.awt.EventQueue.invokeLater(new Runnable() {

                public void run() {
                    meter.setValue(volume);
                }
            });

            volume = 0;
        } else {
            double volume = Math.abs(Double.parseDouble(data));

            if (volume > this.volume) {
                this.volume = volume;
            }
        }

        count++;
    }

    public void microphoneVolume(String data) {
        micVolumeSpinner.setValue((Float.parseFloat(data)));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        vuMeterPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        micVolumeSpinner = new javax.swing.JSpinner();

        jLabel1.setText("Mic Volume:");

        vuMeterPanel.setMinimumSize(new java.awt.Dimension(230, 26));
        vuMeterPanel.setPreferredSize(new java.awt.Dimension(230, 26));

        jLabel2.setFont(jLabel2.getFont());
        jLabel2.setText("Level:");

        micVolumeSpinner.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                micVolumeSpinnerStateChanged(evt);
            }
        });

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(layout.createSequentialGroup()
                        .add(53, 53, 53)
                        .add(jLabel2))
                    .add(layout.createSequentialGroup()
                        .addContainerGap()
                        .add(jLabel1)))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(vuMeterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)
                    .add(layout.createSequentialGroup()
                        .add(12, 12, 12)
                        .add(micVolumeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 50, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(vuMeterPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 43, Short.MAX_VALUE)
                    .add(jLabel2))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jLabel1)
                    .add(micVolumeSpinner, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .add(29, 29, 29))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void micVolumeSpinnerStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_micVolumeSpinnerStateChanged
        SoftphoneControl sc = SoftphoneControlImpl.getInstance();

        double volume = (Float) micVolumeSpinner.getValue();

        try {
            sc.sendCommandToSoftphone("microphoneVolume=" + volume);
        } catch (IOException e) {
            System.out.println("Unable to send microphone volume command to softphone:  " + e.getMessage());
        }
    }//GEN-LAST:event_micVolumeSpinnerStateChanged

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JSpinner micVolumeSpinner;
    private javax.swing.JPanel vuMeterPanel;
    // End of variables declaration//GEN-END:variables
}
