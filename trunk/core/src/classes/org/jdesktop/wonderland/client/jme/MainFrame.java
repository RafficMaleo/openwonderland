/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2008, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * $Revision$
 * $Date$
 * $State$
 */
package org.jdesktop.wonderland.client.jme;

import java.awt.Canvas;
import java.awt.Dimension;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.ToolTipManager;
import org.jdesktop.mtgame.FrameRateListener;
import org.jdesktop.mtgame.WorldManager;
import org.jdesktop.wonderland.client.help.HelpSystem;
import org.jdesktop.wonderland.common.LogControl;

import org.jdesktop.wonderland.client.softphone.SoftphoneControlImpl;

/**
 * The Main JFrame for the wonderland jme client
 * 
 * @author  paulby
 */
public class MainFrame extends javax.swing.JFrame {
    private static final ResourceBundle bundle = java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/client/jme/resources/bundle", Locale.getDefault());

    static {
        new LogControl(MainFrame.class, "/org/jdesktop/wonderland/client/jme/resources/logging.properties");
    }
    
    /** Creates new form MainFrame */
    public MainFrame(WorldManager wm, int width, int height) {
        JPopupMenu.setDefaultLightWeightPopupEnabled(false);
        ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);

        initComponents();
        
        // Add the help menu to the main menu bar
        HelpSystem helpSystem = new HelpSystem();
        JMenu helpMenu = helpSystem.getHelpJMenu();
        mainMenuBar.add(helpMenu);
        
        wm.getRenderManager().setFrameRateListener(new FrameRateListener() {
            public void currentFramerate(float framerate) {
                fpsLabel.setText("FPS: "+framerate);
            }
        }, 100);

        setTitle(java.util.ResourceBundle.getBundle("org/jdesktop/wonderland/client/jme/resources/bundle").getString("Wonderland"));
        centerPanel.setMinimumSize(new Dimension(width, height));
        centerPanel.setPreferredSize(new Dimension(width, height));

        pack();
    }

    /**
     * Returns the canvas of the frame.
     */
    public Canvas getCanvas () {
        return ViewManager.getViewManager().getCanvas();
    }

    /**
     * Returns the panel of the frame in which the 3D canvas resides.
     */
    public JPanel getCanvas3DPanel () {
        return centerPanel;
    }

    /**
     * Add the specified menu item to the tool menu.
     * 
     * TODO - design a better way to manage the menus and toolsbars
     * 
     * @param menuItem
     */
    public void addToToolMenu(JMenuItem menuItem) {
        toolsMenu.add(menuItem);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jToolBar1 = new javax.swing.JToolBar();
        cellViewerTTB = new javax.swing.JButton();
        softphoneButton = new javax.swing.JButton();
        testAudioButton = new javax.swing.JButton();
        reconnectSoftphoneButton = new javax.swing.JButton();
        transferCallButton = new javax.swing.JButton();
        logAudioProblemButton = new javax.swing.JButton();
        virtualPhoneButton = new javax.swing.JButton();
        centerPanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        fpsLabel = new javax.swing.JLabel();
        mainMenuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        exitMI = new javax.swing.JMenuItem();
        editMenu = new javax.swing.JMenu();
        toolsMenu = new javax.swing.JMenu();
        AudioMenu = new javax.swing.JMenu();
        softphoneMenuItem = new javax.swing.JCheckBoxMenuItem();
        testAudioMenuItem = new javax.swing.JMenuItem();
        reconnectSoftphoneMenuItem = new javax.swing.JMenuItem();
        transferCallMenuItem = new javax.swing.JMenuItem();
        logAudioProblemMenuItem = new javax.swing.JMenuItem();
        virtualPhoneMenuItem = new javax.swing.JMenuItem();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jToolBar1.setRollover(true);

        cellViewerTTB.setText("Editor");
        cellViewerTTB.setFocusable(false);
        cellViewerTTB.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cellViewerTTB.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cellViewerTTB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cellViewerMIActionPerformed(evt);
            }
        });
        jToolBar1.add(cellViewerTTB);

        softphoneButton.setText("Softphone");
        softphoneButton.setFocusable(false);
        softphoneButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        softphoneButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        softphoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softphoneButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(softphoneButton);

        testAudioButton.setText("TestAudio");
        testAudioButton.setFocusable(false);
        testAudioButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        testAudioButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        testAudioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAudioButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(testAudioButton);

        reconnectSoftphoneButton.setText("ReconnectSoftphone");
        reconnectSoftphoneButton.setFocusable(false);
        reconnectSoftphoneButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        reconnectSoftphoneButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        reconnectSoftphoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconnectSoftphoneButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(reconnectSoftphoneButton);

        transferCallButton.setText("TransferCall");
        transferCallButton.setFocusable(false);
        transferCallButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        transferCallButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        transferCallButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferCallButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(transferCallButton);

        logAudioProblemButton.setText("LogAudioProblem");
        logAudioProblemButton.setFocusable(false);
        logAudioProblemButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        logAudioProblemButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        logAudioProblemButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logAudioProblemButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(logAudioProblemButton);

        virtualPhoneButton.setText("VirtualPhone");
        virtualPhoneButton.setFocusable(false);
        virtualPhoneButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        virtualPhoneButton.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        virtualPhoneButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                virtualPhoneButtonActionPerformed(evt);
            }
        });
        jToolBar1.add(virtualPhoneButton);

        getContentPane().add(jToolBar1, java.awt.BorderLayout.PAGE_START);
        getContentPane().add(centerPanel, java.awt.BorderLayout.CENTER);

        fpsLabel.setText("FPS :");
        jPanel1.add(fpsLabel);

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_END);

        fileMenu.setText(bundle.getString("File")); // NOI18N

        exitMI.setText(bundle.getString("Exit")); // NOI18N
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        fileMenu.add(exitMI);

        mainMenuBar.add(fileMenu);

        editMenu.setText(bundle.getString("Edit")); // NOI18N
        mainMenuBar.add(editMenu);

        toolsMenu.setText(bundle.getString("Tools")); // NOI18N

        AudioMenu.setText("Audio");
        AudioMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AudioMenuActionPerformed(evt);
            }
        });

        softphoneMenuItem.setText("Softphone");
        softphoneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                softphoneMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(softphoneMenuItem);

        testAudioMenuItem.setText("Test Audio");
        testAudioMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testAudioMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(testAudioMenuItem);

        reconnectSoftphoneMenuItem.setText("Reconnect Softphone");
        reconnectSoftphoneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reconnectSoftphoneMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(reconnectSoftphoneMenuItem);

        transferCallMenuItem.setText("Transfer Call");
        transferCallMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferCallMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(transferCallMenuItem);

        logAudioProblemMenuItem.setText("Log Audio Problem");
        logAudioProblemMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logAudioProblemMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(logAudioProblemMenuItem);

        virtualPhoneMenuItem.setText("Virtual Phone");
        virtualPhoneMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                virtualPhoneMenuItemActionPerformed(evt);
            }
        });
        AudioMenu.add(virtualPhoneMenuItem);

        toolsMenu.add(AudioMenu);

        mainMenuBar.add(toolsMenu);

        setJMenuBar(mainMenuBar);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
// TODO add your handling code here:
    System.exit(0);
}//GEN-LAST:event_exitMIActionPerformed

private void cellViewerMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cellViewerMIActionPerformed

}//GEN-LAST:event_cellViewerMIActionPerformed

private void AudioMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AudioMenuActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_AudioMenuActionPerformed

private void logAudioProblemMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logAudioProblemMenuItemActionPerformed
if (audioMenuListener != null) {
	audioMenuListener.logAudioProblem();
    }
}//GEN-LAST:event_logAudioProblemMenuItemActionPerformed

private void transferCallMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferCallMenuItemActionPerformed
if (audioMenuListener != null) {
	audioMenuListener.transferCall();
    }
}//GEN-LAST:event_transferCallMenuItemActionPerformed

private void reconnectSoftphoneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconnectSoftphoneMenuItemActionPerformed
if (audioMenuListener != null) {
	audioMenuListener.reconnectSoftphone();
    }
}//GEN-LAST:event_reconnectSoftphoneMenuItemActionPerformed

private void testAudioMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAudioMenuItemActionPerformed
if (audioMenuListener != null) {
	audioMenuListener.testAudio();
    }
}//GEN-LAST:event_testAudioMenuItemActionPerformed

private void softphoneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softphoneMenuItemActionPerformed
if (audioMenuListener != null) {
	audioMenuListener.showSoftphone(softphoneMenuItem.isSelected());
    }
}//GEN-LAST:event_softphoneMenuItemActionPerformed

private VirtualPhoneListener virtualPhoneListener;

public void addVirtualPhoneListener(VirtualPhoneListener virtualPhoneListener) {
    this.virtualPhoneListener = virtualPhoneListener;
}

private void virtualPhoneMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_virtualPhoneMenuItemActionPerformed
if (virtualPhoneListener != null) {
    virtualPhoneListener.virtualPhoneMenuItemSelected();
}
}//GEN-LAST:event_virtualPhoneMenuItemActionPerformed

private void softphoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_softphoneButtonActionPerformed
if (audioMenuListener != null) {
    boolean isVisible = SoftphoneControlImpl.getInstance().isVisible();
    audioMenuListener.showSoftphone(!isVisible);
}
}//GEN-LAST:event_softphoneButtonActionPerformed

private void testAudioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testAudioButtonActionPerformed
if (audioMenuListener != null) {
    audioMenuListener.testAudio();
}
}//GEN-LAST:event_testAudioButtonActionPerformed

private void reconnectSoftphoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reconnectSoftphoneButtonActionPerformed
if (audioMenuListener != null) {
    audioMenuListener.reconnectSoftphone();
}
}//GEN-LAST:event_reconnectSoftphoneButtonActionPerformed

private void transferCallButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferCallButtonActionPerformed
if (audioMenuListener != null) {
    audioMenuListener.transferCall();
}
}//GEN-LAST:event_transferCallButtonActionPerformed

private void logAudioProblemButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logAudioProblemButtonActionPerformed
if (audioMenuListener != null) {
    audioMenuListener.logAudioProblem();
}
}//GEN-LAST:event_logAudioProblemButtonActionPerformed

private void virtualPhoneButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_virtualPhoneButtonActionPerformed
if (virtualPhoneListener != null) {
    virtualPhoneListener.virtualPhoneMenuItemSelected();
}
}//GEN-LAST:event_virtualPhoneButtonActionPerformed

public void updateSoftphoneCheckBoxMenuItem(boolean isSelected) {
    softphoneMenuItem.setSelected(isSelected);
}

private AudioMenuListener audioMenuListener;

public void addAudioMenuListener(AudioMenuListener audioMenuListener) {
    this.audioMenuListener = audioMenuListener;
}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu AudioMenu;
    private javax.swing.JButton cellViewerTTB;
    private javax.swing.JPanel centerPanel;
    private javax.swing.JMenu editMenu;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JLabel fpsLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JButton logAudioProblemButton;
    private javax.swing.JMenuItem logAudioProblemMenuItem;
    private javax.swing.JMenuBar mainMenuBar;
    private javax.swing.JButton reconnectSoftphoneButton;
    private javax.swing.JMenuItem reconnectSoftphoneMenuItem;
    private javax.swing.JButton softphoneButton;
    private javax.swing.JCheckBoxMenuItem softphoneMenuItem;
    private javax.swing.JButton testAudioButton;
    private javax.swing.JMenuItem testAudioMenuItem;
    private javax.swing.JMenu toolsMenu;
    private javax.swing.JButton transferCallButton;
    private javax.swing.JMenuItem transferCallMenuItem;
    private javax.swing.JButton virtualPhoneButton;
    private javax.swing.JMenuItem virtualPhoneMenuItem;
    // End of variables declaration//GEN-END:variables

}
