/**
 * Project Wonderland
 *
 * Copyright (c) 2004-2008, Sun Microsystems, Inc., All Rights Reserved
 *
 * Redistributions in source code form must reproduce the above
 * copyright and this condition.
 *
 * The contents of this file are subject to the GNU General Public
 * License, Version 2 (the "License"); you may not use this file
 * except in compliance with the License. A copy of the License is
 * available at http://www.opensource.org/licenses/gpl-license.php.
 *
 * $Revision$
 * $Date$
 * $State$
 */

package org.jdesktop.wonderland.client.jme.login;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.util.Properties;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JPanel;
import org.jdesktop.wonderland.client.ClientContext;
import org.jdesktop.wonderland.client.comms.LoginFailureException;
import org.jdesktop.wonderland.client.jme.login.WonderlandLoginDialog.LoginPanel;
import org.jdesktop.wonderland.client.login.LoginManager.NoAuthLoginControl;

/**
 *
 * @author jkaplan
 */
public class NoAuthLoginPanel extends JPanel implements LoginPanel {
    private static final Logger logger =
            Logger.getLogger(NoAuthLoginPanel.class.getName());

    private NoAuthLoginControl control;

    /** Creates new form NoAuthLoginPanel */
    public NoAuthLoginPanel(String serverURL, NoAuthLoginControl control) {
        this.control = control;

        initComponents();

        // load any saved credentials
        loadCredentials();

        // set the server location
        naServerField.setText(serverURL);
    }

    public JPanel getPanel() {
        return this;
    }

    public String doLogin() {
        String username = naUsernameField.getText();
        String fullname = naFullNameField.getText();
        try {
            control.authenticate(username, fullname);

            // If we got here, it means login succeeded.  Save the successful
            // login information.
            storeCredentials(username, fullname);
            return null;
        } catch (LoginFailureException lfe) {
            logger.log(Level.WARNING, "Login failed", lfe);
            return lfe.getMessage();
        }
    }

    public void cancel() {
        control.cancel();
    }

    protected void storeCredentials(String username, String fullname) {
        Properties props = new Properties();
        props.put("username", username);
        props.put("fullname", fullname);

        File configDir = ClientContext.getUserDirectory("config");

        try {
            FileWriter outWriter =
                    new FileWriter(new File(configDir, "login.properties"));
            props.list(new PrintWriter(outWriter));
            outWriter.close();
        } catch (IOException ioe) {
            logger.log(Level.WARNING, "Error writing login data", ioe);
        }
    }

    protected void loadCredentials() {
        File configDir = ClientContext.getUserDirectory("config");
        File propsFile = new File(configDir, "login.properties");
        if (!propsFile.exists()) {
            return;
        }

        try {
            FileReader inReader = new FileReader(propsFile);

            Properties props = new Properties();
            props.load(inReader);

            naUsernameField.setText(props.getProperty("username"));
            naFullNameField.setText(props.getProperty("fullname"));
        } catch (IOException ioe) {
            logger.log(Level.WARNING, "Error reading login data", ioe);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        naServerLabel = new javax.swing.JLabel();
        naFullNameLabel = new javax.swing.JLabel();
        naUsernameLabel = new javax.swing.JLabel();
        naServerField = new javax.swing.JTextField();
        naUsernameField = new javax.swing.JTextField();
        naFullNameField = new javax.swing.JTextField();

        setOpaque(false);

        naServerLabel.setFont(new java.awt.Font("Dialog", 1, 13));
        naServerLabel.setText("Server:");

        naFullNameLabel.setFont(new java.awt.Font("Dialog", 1, 13));
        naFullNameLabel.setText("Full Name:");

        naUsernameLabel.setFont(new java.awt.Font("Dialog", 1, 13));
        naUsernameLabel.setText("Username:");

        naServerField.setEditable(false);

        naUsernameField.setFont(new java.awt.Font("Dialog", 0, 13));
        naUsernameField.setMinimumSize(new java.awt.Dimension(98, 22));

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
                    .add(naFullNameLabel)
                    .add(naUsernameLabel)
                    .add(naServerLabel))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                    .add(naFullNameField)
                    .add(naUsernameField, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .add(naServerField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 274, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(naUsernameLabel)
                    .add(naUsernameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(naFullNameLabel)
                    .add(naFullNameField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(naServerField, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(naServerLabel))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField naFullNameField;
    private javax.swing.JLabel naFullNameLabel;
    private javax.swing.JTextField naServerField;
    private javax.swing.JLabel naServerLabel;
    private javax.swing.JTextField naUsernameField;
    private javax.swing.JLabel naUsernameLabel;
    // End of variables declaration//GEN-END:variables

}
